// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Stytch.net.Models
{
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Fraud.Fingerprint.Lookup"/>..
    /// </summary>
    public class FraudFingerprintLookupRequest
    {
        /// <summary>
        /// The telemetry ID associated with the fingerprint getting looked up.
        /// </summary>
        [JsonProperty("telemetry_id")]
        public string TelemetryId { get; set; }
        /// <summary>
        /// External identifiers that you wish to associate with the given telemetry ID. You will be able to search
        /// for fingerprint results by these identifiers in the DFP analytics dashboard. External metadata fields
        /// may not exceed 65 characters. They may only contain alphanumerics and the characters `_` `-` `+` `.` or
        /// `@`.
        /// </summary>
        [JsonProperty("external_metadata")]
        public Metadata ExternalMetadata { get; set; }
        public FraudFingerprintLookupRequest(string telemetryId)
        {
            this.TelemetryId = telemetryId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Fraud.Fingerprint.Lookup"/>..
    /// </summary>
    public class FraudFingerprintLookupResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The telemetry ID associated with the fingerprint getting looked up.
        /// </summary>
        [JsonProperty("telemetry_id")]
        public string TelemetryId { get; set; }
        /// <summary>
        /// A Stytch fingerprint consists of the following identifiers:
        /// </summary>
        [JsonProperty("fingerprints")]
        public Fingerprints Fingerprints { get; set; }
        /// <summary>
        /// The metadata associated with each fingerprint
        /// </summary>
        [JsonProperty("verdict")]
        public Verdict Verdict { get; set; }
        /// <summary>
        /// External identifiers that you wish to associate with the given telemetry ID. You will be able to search
        /// for fingerprint results by these identifiers in the DFP analytics dashboard. External metadata fields
        /// may not exceed 65 characters. They may only contain alphanumerics and the characters `_` `-` `+` `.` or
        /// `@`.
        /// </summary>
        [JsonProperty("external_metadata")]
        public Metadata ExternalMetadata { get; set; }
        /// <summary>
        /// The time when the fingerprint was taken. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime CreatedAt { get; set; }
        /// <summary>
        /// The timestamp when the fingerprint expires. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("expires_at")]
        public DateTime ExpiresAt { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// Additional information about the user's browser and network.
        /// </summary>
        [JsonProperty("properties")]
        public Properties Properties { get; set; }
    }

}
