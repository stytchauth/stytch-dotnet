// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Stytch.net.Models
{
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.IDP.OAuth.Authorize"/>..
    /// </summary>
    public class IDPOAuthAuthorizeRequest
    {
        /// <summary>
        /// Indicates whether the user granted the requested scopes.
        /// </summary>
        [JsonProperty("consent_granted")]
        public bool ConsentGranted { get; set; }
        /// <summary>
        /// An array of scopes requested by the client.
        /// </summary>
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
        /// <summary>
        /// The ID of the Connected App client.
        /// </summary>
        [JsonProperty("client_id")]
        public string ClientId { get; set; }
        /// <summary>
        /// The callback URI used to redirect the user after authentication. This is the same URI provided at the
        /// start of the OAuth flow.  This field is required when using the `authorization_code` grant.
        /// </summary>
        [JsonProperty("redirect_uri")]
        public string RedirectUri { get; set; }
        /// <summary>
        /// The OAuth 2.0 response type. For authorization code flows this value is `code`.
        /// </summary>
        [JsonProperty("response_type")]
        public string ResponseType { get; set; }
        /// <summary>
        /// The unique ID of a specific User. You may use an `external_id` here if one is set for the user.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Space separated list that specifies how the Authorization Server should prompt the user for
        /// reauthentication and consent. Only `consent` is supported today.
        /// </summary>
        [JsonProperty("prompt")]
        public string Prompt { get; set; }
        /// <summary>
        /// An opaque value used to maintain state between the request and callback.
        /// </summary>
        [JsonProperty("state")]
        public string State { get; set; }
        /// <summary>
        /// A string used to associate a client session with an ID token to mitigate replay attacks.
        /// </summary>
        [JsonProperty("nonce")]
        public string Nonce { get; set; }
        /// <summary>
        /// A base64url encoded challenge derived from the code verifier for PKCE flows.
        /// </summary>
        [JsonProperty("code_challenge")]
        public string CodeChallenge { get; set; }
        public IDPOAuthAuthorizeRequest(bool consentGranted, List<string> scopes, string clientId, string redirectUri, string responseType)
        {
            this.ConsentGranted = consentGranted;
            this.Scopes = scopes;
            this.ClientId = clientId;
            this.RedirectUri = redirectUri;
            this.ResponseType = responseType;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.IDP.OAuth.Authorize"/>..
    /// </summary>
    public class IDPOAuthAuthorizeResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The callback URI used to redirect the user after authentication. This is the same URI provided at the
        /// start of the OAuth flow.  This field is required when using the `authorization_code` grant.
        /// </summary>
        [JsonProperty("redirect_uri")]
        public string RedirectUri { get; set; }
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// A one-time use code that can be exchanged for tokens.
        /// </summary>
        [JsonProperty("authorization_code")]
        public string AuthorizationCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.IDP.OAuth.AuthorizeStart"/>..
    /// </summary>
    public class IDPOAuthAuthorizeStartRequest
    {
        /// <summary>
        /// The ID of the Connected App client.
        /// </summary>
        [JsonProperty("client_id")]
        public string ClientId { get; set; }
        /// <summary>
        /// The callback URI used to redirect the user after authentication. This is the same URI provided at the
        /// start of the OAuth flow.  This field is required when using the `authorization_code` grant.
        /// </summary>
        [JsonProperty("redirect_uri")]
        public string RedirectUri { get; set; }
        /// <summary>
        /// The OAuth 2.0 response type. For authorization code flows this value is `code`.
        /// </summary>
        [JsonProperty("response_type")]
        public string ResponseType { get; set; }
        /// <summary>
        /// An array of scopes requested by the client.
        /// </summary>
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
        /// <summary>
        /// The unique ID of a specific User. You may use an `external_id` here if one is set for the user.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Space separated list that specifies how the Authorization Server should prompt the user for
        /// reauthentication and consent. Only `consent` is supported today.
        /// </summary>
        [JsonProperty("prompt")]
        public string Prompt { get; set; }
        public IDPOAuthAuthorizeStartRequest(string clientId, string redirectUri, string responseType, List<string> scopes)
        {
            this.ClientId = clientId;
            this.RedirectUri = redirectUri;
            this.ResponseType = responseType;
            this.Scopes = scopes;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.IDP.OAuth.AuthorizeStart"/>..
    /// </summary>
    public class IDPOAuthAuthorizeStartResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        [JsonProperty("client")]
        public ConnectedAppPublic Client { get; set; }
        /// <summary>
        /// Whether the user must provide explicit consent for the authorization request.
        /// </summary>
        [JsonProperty("consent_required")]
        public bool ConsentRequired { get; set; }
        /// <summary>
        /// Details about each requested scope.
        /// </summary>
        [JsonProperty("scope_results")]
        public List<IDPScopeResult> ScopeResults { get; set; }
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

}
