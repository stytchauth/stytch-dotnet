// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Stytch.net.Models
{
    public class ASNProperties
    {
        /// <summary>
        /// The Autonomous System Number of the user's network.
        /// </summary>
        [JsonProperty("asn")]
        public string Asn { get; set; }
        /// <summary>
        /// Public name associated with the ASN.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// The CIDR block associated with the ASN.
        /// </summary>
        [JsonProperty("network")]
        public string Network { get; set; }
    }
    public class BrowserProperties
    {
        /// <summary>
        /// The user agent of the user's browser.
        /// </summary>
        [JsonProperty("user_agent")]
        public string UserAgent { get; set; }
    }
    public class Fingerprints
    {
        /// <summary>
        /// Combination of signals associated with a specific network commonly known as TLS fingerprinting. 
        /// </summary>
        [JsonProperty("network_fingerprint")]
        public string NetworkFingerprint { get; set; }
        /// <summary>
        /// Combinations of signals to identify an operating system and architecture.
        /// </summary>
        [JsonProperty("hardware_fingerprint")]
        public string HardwareFingerprint { get; set; }
        /// <summary>
        /// Combination of signals to identify a browser and its specific version.
        /// </summary>
        [JsonProperty("browser_fingerprint")]
        public string BrowserFingerprint { get; set; }
        /// <summary>
        /// Cookie-less way of identifying a unique user.
        /// </summary>
        [JsonProperty("visitor_fingerprint")]
        public string VisitorFingerprint { get; set; }
        /// <summary>
        /// The cookie stored on the user's device that uniquely identifies them.
        /// </summary>
        [JsonProperty("visitor_id")]
        public string VisitorId { get; set; }
        /// <summary>
        /// Combination of VisitorID and NetworkFingerprint to create a clear identifier of a browser.
        /// </summary>
        [JsonProperty("browser_id")]
        public string BrowserId { get; set; }
    }
    public class IPGeoProperties
    {
        /// <summary>
        /// The city where the IP is located.
        /// </summary>
        [JsonProperty("city")]
        public string City { get; set; }
        /// <summary>
        /// The region where the IP is located.
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The country where the IP is located.
        /// </summary>
        [JsonProperty("country")]
        public string Country { get; set; }
    }
    public class Metadata
    {
        /// <summary>
        /// An external ID, such as a user ID, that you wish to associate with the telemetry ID.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
        /// <summary>
        /// The organization ID you wish to associate with the telemetry ID.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The user action, such as 'login', that you wish to associate with the telemetry ID.
        /// </summary>
        [JsonProperty("user_action")]
        public string UserAction { get; set; }
    }
    public class NetworkProperties
    {
        /// <summary>
        /// The IP address of the client.
        /// </summary>
        [JsonProperty("ip_address")]
        public string IpAddress { get; set; }
        /// <summary>
        /// Information about the network's ASN (Autonomous System Number).
        /// </summary>
        [JsonProperty("asn")]
        public ASNProperties Asn { get; set; }
        /// <summary>
        /// Information about the geolocation of the user's IP address.
        /// </summary>
        [JsonProperty("ip_geolocation")]
        public IPGeoProperties IpGeolocation { get; set; }
        /// <summary>
        /// Whether the user is using a proxy.
        /// </summary>
        [JsonProperty("is_proxy")]
        public bool IsProxy { get; set; }
        /// <summary>
        /// Whether the user is using a VPN.
        /// </summary>
        [JsonProperty("is_vpn")]
        public bool IsVpn { get; set; }
    }
    public class Properties
    {
        [JsonProperty("network_properties")]
        public NetworkProperties NetworkProperties { get; set; }
        [JsonProperty("browser_properties")]
        public BrowserProperties BrowserProperties { get; set; }
    }
    public class Rule
    {
        /// <summary>
        /// The rule type. The possible values are `VISITOR_ID`, `BROWSER_ID`, `VISITOR_FINGERPRINT`,
        /// `BROWSER_FINGERPRINT`, `HARDWARE_FINGERPRINT`, `NETWORK_FINGERPRINT`, `CIDR_BLOCK`, `ASN`, or
        /// `COUNTRY_CODE`.
        /// </summary>
        [JsonProperty("rule_type")]
        public RuleType RuleType { get; set; }
        /// <summary>
        /// The action (`ALLOW`, `BLOCK`, or `CHALLENGE`) that will be returned for this rule.
        /// </summary>
        [JsonProperty("action")]
        public RuleAction Action { get; set; }
        /// <summary>
        /// The time when the rule was created. Values conform to the RFC 3339 standard and are expressed in UTC,
        /// e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime CreatedAt { get; set; }
        /// <summary>
        /// The visitor ID that a rule was set for.
        /// </summary>
        [JsonProperty("visitor_id")]
        public string VisitorId { get; set; }
        /// <summary>
        /// The browser ID that a rule was set for.
        /// </summary>
        [JsonProperty("browser_id")]
        public string BrowserId { get; set; }
        /// <summary>
        /// The visitor fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("visitor_fingerprint")]
        public string VisitorFingerprint { get; set; }
        /// <summary>
        /// The browser fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("browser_fingerprint")]
        public string BrowserFingerprint { get; set; }
        /// <summary>
        /// The hardware fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("hardware_fingerprint")]
        public string HardwareFingerprint { get; set; }
        /// <summary>
        /// The network fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("network_fingerprint")]
        public string NetworkFingerprint { get; set; }
        /// <summary>
        /// The CIDR block that a rule was set for. If an end user's IP address is within this CIDR block, this rule
        /// will be applied.
        /// </summary>
        [JsonProperty("cidr_block")]
        public string CidrBlock { get; set; }
        /// <summary>
        /// The country code that a rule was set for.
        /// </summary>
        [JsonProperty("country_code")]
        public string CountryCode { get; set; }
        /// <summary>
        /// The ASN that a rule was set for.
        /// </summary>
        [JsonProperty("asn")]
        public string Asn { get; set; }
        /// <summary>
        /// A description for the rule.
        /// </summary>
        [JsonProperty("description")]
        public string Description { get; set; }
        /// <summary>
        /// The timestamp when the rule expires. Values conform to the RFC 3339 standard and are expressed in UTC,
        /// e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("expires_at")]
        public DateTime? ExpiresAt { get; set; }
        /// <summary>
        /// The time when the rule was last updated. Will be null if the rule has never been updated. Values conform
        /// to the RFC 3339 standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("last_updated_at")]
        public DateTime? LastUpdatedAt { get; set; }
    }
    public class Verdict
    {
        /// <summary>
        /// The suggested action based on the fingerprint review. The available actions are:
        ///   * `ALLOW` - This is a known valid device grouping or device profile that is part of the default ALLOW
        /// listed set of known devices by Stytch. This grouping is made up of verified device profiles that match
        /// the characteristics of known/authentic traffic origins
        ///   * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
        /// from completing the privileged action in question
        ///   * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through
        /// increased friction such as 2FA or other forms of extended user verification before allowing the
        /// privileged action to proceed
        ///   
        /// </summary>
        [JsonProperty("action")]
        public VerdictAction Action { get; set; }
        /// <summary>
        /// A set of contextual clues to inform why a `CHALLENGE` or `BLOCK` action was suggested. For a list of
        /// possible Reasons, see
        /// [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
        /// </summary>
        [JsonProperty("reasons")]
        public List<string> Reasons { get; set; }
        /// <summary>
        /// The operating system and architecture that took the fingerprint.
        /// </summary>
        [JsonProperty("detected_device_type")]
        public string DetectedDeviceType { get; set; }
        /// <summary>
        /// The assessment of whether this is an authentic device. It will be false if hardware or browser deception
        /// is detected.
        /// </summary>
        [JsonProperty("is_authentic_device")]
        public bool IsAuthenticDevice { get; set; }
        /// <summary>
        /// A list of verdict reason overrides that were applied, if any.
        /// </summary>
        [JsonProperty("verdict_reason_overrides")]
        public List<VerdictReasonOverride> VerdictReasonOverrides { get; set; }
        /// <summary>
        /// The type of rule match that was applied (e.g. `VISITOR_ID`), if any. This field will only be present if
        /// there is a `RULE_MATCH` reason in the list of verdict reasons.
        /// </summary>
        [JsonProperty("rule_match_type")]
        public RuleType? RuleMatchType { get; set; }
        /// <summary>
        /// The rule that was applied (e.g. a specific visitor ID value), if any. This field will only be present if
        /// there is a `RULE_MATCH` reason in the list of verdict reasons.
        /// </summary>
        [JsonProperty("rule_match_identifier")]
        public string RuleMatchIdentifier { get; set; }
    }
    public class VerdictReasonAction
    {
        /// <summary>
        /// The verdict reason.
        /// </summary>
        [JsonProperty("verdict_reason")]
        public string VerdictReason { get; set; }
        /// <summary>
        /// The default action returned for the specified verdict reason in a fingerprint lookup when no overrides
        /// are specified.
        /// </summary>
        [JsonProperty("default_action")]
        public VerdictReasonActionAction DefaultAction { get; set; }
        /// <summary>
        /// If not null, this action will be returned for the specified verdict reason in a fingerprint lookup, in
        /// place of the default action.
        /// </summary>
        [JsonProperty("override_action")]
        public VerdictReasonActionAction? OverrideAction { get; set; }
        /// <summary>
        /// The time when the override was created, if one exists. Values conform to the RFC 3339 standard and are
        /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("override_created_at")]
        public DateTime? OverrideCreatedAt { get; set; }
        /// <summary>
        /// A description of the override, if one exists.
        /// </summary>
        [JsonProperty("override_description")]
        public string OverrideDescription { get; set; }
    }
    public class VerdictReasonOverride
    {
        /// <summary>
        /// The verdict reason that was overridden.
        /// </summary>
        [JsonProperty("verdict_reason")]
        public string VerdictReason { get; set; }
        /// <summary>
        /// The action that was applied for the given verdict reason.
        /// </summary>
        [JsonProperty("override_action")]
        public VerdictReasonOverrideAction OverrideAction { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum RuleAction
    {
        [EnumMember(Value = "ALLOW")]
        ALLOW,
        [EnumMember(Value = "CHALLENGE")]
        CHALLENGE,
        [EnumMember(Value = "BLOCK")]
        BLOCK,
        [EnumMember(Value = "NONE")]
        NONE,
    }
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RuleType
    {
        [EnumMember(Value = "VISITOR_ID")]
        VISITOR_ID,
        [EnumMember(Value = "BROWSER_ID")]
        BROWSER_ID,
        [EnumMember(Value = "VISITOR_FINGERPRINT")]
        VISITOR_FINGERPRINT,
        [EnumMember(Value = "BROWSER_FINGERPRINT")]
        BROWSER_FINGERPRINT,
        [EnumMember(Value = "HARDWARE_FINGERPRINT")]
        HARDWARE_FINGERPRINT,
        [EnumMember(Value = "NETWORK_FINGERPRINT")]
        NETWORK_FINGERPRINT,
        [EnumMember(Value = "CIDR_BLOCK")]
        CIDR_BLOCK,
        [EnumMember(Value = "ASN")]
        ASN,
        [EnumMember(Value = "COUNTRY_CODE")]
        COUNTRY_CODE,
    }
    [JsonConverter(typeof(StringEnumConverter))]
    public enum VerdictAction
    {
        [EnumMember(Value = "ALLOW")]
        ALLOW,
        [EnumMember(Value = "CHALLENGE")]
        CHALLENGE,
        [EnumMember(Value = "BLOCK")]
        BLOCK,
    }
    [JsonConverter(typeof(StringEnumConverter))]
    public enum VerdictReasonActionAction
    {
        [EnumMember(Value = "ALLOW")]
        ALLOW,
        [EnumMember(Value = "CHALLENGE")]
        CHALLENGE,
        [EnumMember(Value = "BLOCK")]
        BLOCK,
    }
    [JsonConverter(typeof(StringEnumConverter))]
    public enum VerdictReasonOverrideAction
    {
        [EnumMember(Value = "ALLOW")]
        ALLOW,
        [EnumMember(Value = "CHALLENGE")]
        CHALLENGE,
        [EnumMember(Value = "BLOCK")]
        BLOCK,
    }
}
