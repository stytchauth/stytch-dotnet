// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Stytch.net.Models.Consumer
{
    public class OAuthProviderValues
    {
        /// <summary>
        /// The `access_token` that you may use to access the User's data in the provider's API.
        /// </summary>
        [JsonProperty("access_token")]
        public required string AccessToken { get; set; }
        /// <summary>
        /// The `refresh_token` that you may use to obtain a new `access_token` for the User within the provider's
        /// API.
        /// </summary>
        [JsonProperty("refresh_token")]
        public required string RefreshToken { get; set; }
        /// <summary>
        /// The `id_token` returned by the OAuth provider. ID Tokens are JWTs that contain structured information
        /// about a user. The exact content of each ID Token varies from provider to provider. ID Tokens are
        /// returned from OAuth providers that conform to the [OpenID Connect](https://openid.net/foundation/)
        /// specification, which is based on OAuth.
        /// </summary>
        [JsonProperty("id_token")]
        public required string IdToken { get; set; }
        /// <summary>
        /// The OAuth scopes included for a given provider. See each provider's section above to see which scopes
        /// are included by default and how to add custom scopes.
        /// </summary>
        [JsonProperty("scopes")]
        public required List<string> Scopes { get; set; }
        /// <summary>
        /// The timestamp when the Session expires. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("expires_at")]
        public string? ExpiresAt { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.OAuth.Attach"/>..
    /// </summary>
    public class OAuthAttachRequest
    {
        /// <summary>
        /// The OAuth provider's name.
        /// </summary>
        [JsonProperty("provider")]
        public required string Provider { get; set; }
        /// <summary>
        /// The unique ID of a specific User.
        /// </summary>
        [JsonProperty("user_id")]
        public string? UserId { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string? SessionToken { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string? SessionJwt { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.OAuth.Attach"/>..
    /// </summary>
    public class OAuthAttachResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// A single-use token for connecting the Stytch User selection from an OAuth Attach request to the
        /// corresponding OAuth Start request.
        /// </summary>
        [JsonProperty("oauth_attach_token")]
        public required string OAuthAttachToken { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.OAuth.Authenticate"/>..
    /// </summary>
    public class OAuthAuthenticateRequest
    {
        /// <summary>
        /// The OAuth `token` from the `?token=` query parameter in the URL.
        ///       
        ///       The redirect URL will look like
        /// `https://example.com/authenticate?stytch_token_type=oauth&token=rM_kw42CWBhsHLF62V75jELMbvJ87njMe3tFVj7Qupu7`
        /// 
        ///       In the redirect URL, the `stytch_token_type` will be `oauth`. See
        /// [here](https://stytch.com/docs/guides/dashboard/redirect-urls) for more detail.
        /// </summary>
        [JsonProperty("token")]
        public required string Token { get; set; }
        /// <summary>
        /// Reuse an existing session instead of creating a new one. If you provide us with a `session_token`, then
        /// we'll update the session represented by this session token with this OAuth factor. If this
        /// `session_token` belongs to a different user than the OAuth token, the session_jwt will be ignored. This
        /// endpoint will error if both `session_token` and `session_jwt` are provided.
        /// </summary>
        [JsonProperty("session_token")]
        public string? SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist, 
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        ///   
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        ///   
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// Reuse an existing session instead of creating a new one. If you provide us with a `session_jwt`, then
        /// we'll update the session represented by this JWT with this OAuth factor. If this `session_jwt` belongs
        /// to a different user than the OAuth token, the session_jwt will be ignored. This endpoint will error if
        /// both `session_token` and `session_jwt` are provided.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string? SessionJwt { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object? SessionCustomClaims { get; set; }
        /// <summary>
        /// A base64url encoded one time secret used to validate that the request starts and ends on the same device.
        /// </summary>
        [JsonProperty("code_verifier")]
        public string? CodeVerifier { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.OAuth.Authenticate"/>..
    /// </summary>
    public class OAuthAuthenticateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public required string UserId { get; set; }
        /// <summary>
        /// The unique identifier for the User within a given OAuth provider. Also commonly called the "sub" or
        /// "Subject field" in OAuth protocols.
        /// </summary>
        [JsonProperty("provider_subject")]
        public required string ProviderSubject { get; set; }
        /// <summary>
        /// Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Facebook, GitHub
        /// etc.
        /// </summary>
        [JsonProperty("provider_type")]
        public required string ProviderType { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public required string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public required string SessionJwt { get; set; }
        /// <summary>
        /// The `provider_values` object lists relevant identifiers, values, and scopes for a given OAuth provider.
        /// For example this object will include a provider's `access_token` that you can use to access the
        /// provider's API for a given user.
        /// 
        ///   Note that these values will vary based on the OAuth provider in question, e.g. `id_token` is only
        /// returned by OIDC compliant identity providers.
        /// </summary>
        [JsonProperty("provider_values")]
        public required OAuthProviderValues ProviderValues { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public required User User { get; set; }
        /// <summary>
        /// Indicates if all other of the User's Sessions need to be reset. You should check this field if you
        /// aren't using Stytch's Session product. If you are using Stytch's Session product, we revoke the User's
        /// other sessions for you.
        /// </summary>
        [JsonProperty("reset_sessions")]
        public required bool ResetSessions { get; set; }
        /// <summary>
        /// The unique ID for an OAuth registration.
        /// </summary>
        [JsonProperty("oauth_user_registration_id")]
        public required string OAuthUserRegistrationId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
        /// <summary>
        /// A `Session` object. For backwards compatibility reasons, the session from an OAuth authenticate call is
        /// labeled as `user_session`, but is otherwise just a standard stytch `Session` object.
        /// 
        ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("user_session")]
        public Session? UserSession { get; set; }
    }

}