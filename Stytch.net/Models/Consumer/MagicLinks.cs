// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Stytch.net.Models.Consumer
{
public class Options {
      // Require that the IP address the Magic Link was requested from matches the IP address it's clicked from.
      [JsonProperty("ip_match_required")]
      public required bool IpMatchRequired { get; set; }
      // Require that the user agent the Magic Link was requested from matches the user agent it's clicked from.
      [JsonProperty("user_agent_match_required")]
      public required bool UserAgentMatchRequired { get; set; }
    }
// Request type for `magicLinks.authenticate`.
    public class MagicLinksAuthenticateRequest {
      /**
    * The Magic Link `token` from the `?token=` query parameter in the URL.
    *       
    *       The redirect URL will look like
    * `https://example.com/authenticate?stytch_token_type=magic_links&token=rM_kw42CWBhsHLF62V75jELMbvJ87njMe3tFVj7Qupu7`
    *       
    *       In the redirect URL, the `stytch_token_type` will be `magic_link`. See
    * [here](https://stytch.com/docs/guides/dashboard/redirect-urls) for more detail.
    */
      [JsonProperty("token")]
      public required string Token { get; set; }
      // Provided attributes help with fraud detection.
      [JsonProperty("attributes")]
      public Attributes? Attributes { get; set; }
      // Specify optional security settings.
      [JsonProperty("options")]
      public Options? Options { get; set; }
      // The `session_token` associated with a User's existing Session.
      [JsonProperty("session_token")]
      public string? SessionToken { get; set; }
      /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist, 
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *   
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *   
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    */
      [JsonProperty("session_duration_minutes")]
      public int? SessionDurationMinutes { get; set; }
      // The `session_jwt` associated with a User's existing Session.
      [JsonProperty("session_jwt")]
      public string? SessionJwt { get; set; }
      /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    * 
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
    */
      [JsonProperty("session_custom_claims")]
      public object? SessionCustomClaims { get; set; }
      // A base64url encoded one time secret used to validate that the request starts and ends on the same device.
      [JsonProperty("code_verifier")]
      public string? CodeVerifier { get; set; }
    }
// Response type for `magicLinks.authenticate`.
    public class MagicLinksAuthenticateResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // The `email_id` or `phone_id` involved in the given authentication.
      [JsonProperty("method_id")]
      public required string MethodId { get; set; }
      // A secret token for a given Stytch Session.
      [JsonProperty("session_token")]
      public required string SessionToken { get; set; }
      // The JSON Web Token (JWT) for a given Stytch Session.
      [JsonProperty("session_jwt")]
      public required string SessionJwt { get; set; }
      /**
    * The `user` object affected by this API call. See the
    * [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    */
      [JsonProperty("user")]
      public required User User { get; set; }
      /**
    * Indicates if all other of the User's Sessions need to be reset. You should check this field if you
    * aren't using Stytch's Session product. If you are using Stytch's Session product, we revoke the User's
    * other sessions for you.
    */
      [JsonProperty("reset_sessions")]
      public required bool ResetSessions { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
      /**
    * If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
    * receive a full Session object in the response.
    * 
    *   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    *   
    */
      [JsonProperty("session")]
      public Session? Session { get; set; }
    }
// Request type for `magicLinks.create`.
    public class MagicLinksCreateRequest {
      // The unique ID of a specific User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      /**
    * Set the expiration for the Magic Link `token` in minutes. By default, it expires in 1 hour. The minimum
    * expiration is 5 minutes and the maximum is 7 days (10080 mins).
    */
      [JsonProperty("expiration_minutes")]
      public int? ExpirationMinutes { get; set; }
      // Provided attributes help with fraud detection.
      [JsonProperty("attributes")]
      public Attributes? Attributes { get; set; }
    }
// Response type for `magicLinks.create`.
    public class MagicLinksCreateResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // The Magic Link `token` that you'll include in your contact method of choice, e.g. email or SMS.
      [JsonProperty("token")]
      public required string Token { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
    }

}