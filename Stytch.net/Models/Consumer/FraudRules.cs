// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Stytch.net.Models
{
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Fraud.Rules.List"/>..
    /// </summary>
    public class FraudRulesListRequest
    {
        /// <summary>
        /// The `cursor` field allows you to paginate through your results. Each result array is limited to 100
        /// results. If your query returns more than 100 results, you will need to paginate the responses using the
        /// `cursor`. If you receive a response that includes a non-null `next_cursor`, repeat the request with the
        /// `next_cursor` value set to the `cursor` field to retrieve the next page of results. Continue to make
        /// requests until the `next_cursor` in the response is null.
        /// </summary>
        [JsonProperty("cursor")]
        public string Cursor { get; set; }
        /// <summary>
        /// The number of results to return per page. The default limit is 10. A maximum of 100 results can be
        /// returned by a single get request. If the total size of your result set is greater than one page size,
        /// you must paginate the response. See the `cursor` field.
        /// </summary>
        [JsonProperty("limit")]
        public int? Limit { get; set; }
        public FraudRulesListRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Fraud.Rules.List"/>..
    /// </summary>
    public class FraudRulesListResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The `next_cursor` string is returned when your result contains more than one page of results. This value
        /// is passed into your next request in the `cursor` field.
        /// </summary>
        [JsonProperty("next_cursor")]
        public string NextCursor { get; set; }
        /// <summary>
        /// A list of rules for the project
        /// </summary>
        [JsonProperty("rules")]
        public List<Rule> Rules { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Fraud.Rules.Set"/>..
    /// </summary>
    public class FraudRulesSetRequest
    {
        /// <summary>
        /// The action that should be returned by a fingerprint lookup for that identifier with a `RULE_MATCH`
        /// reason. The following values are valid: `ALLOW`, `BLOCK`, `CHALLENGE`, or `NONE`. For country codes,
        /// `ALLOW` actions are not allowed. If a `NONE` action is specified, it will clear the stored rule.
        /// </summary>
        [JsonProperty("action")]
        public RuleAction Action { get; set; }
        /// <summary>
        /// The visitor ID we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("visitor_id")]
        public string VisitorId { get; set; }
        /// <summary>
        /// The browser ID we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("browser_id")]
        public string BrowserId { get; set; }
        /// <summary>
        /// The visitor fingerprint we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("visitor_fingerprint")]
        public string VisitorFingerprint { get; set; }
        /// <summary>
        /// The browser fingerprint we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("browser_fingerprint")]
        public string BrowserFingerprint { get; set; }
        /// <summary>
        /// The hardware fingerprint we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("hardware_fingerprint")]
        public string HardwareFingerprint { get; set; }
        /// <summary>
        /// The network fingerprint we want to set a rule for. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("network_fingerprint")]
        public string NetworkFingerprint { get; set; }
        /// <summary>
        /// The number of minutes until this rule expires. If no `expires_in_minutes` is specified, then the rule is
        /// kept permanently.
        /// </summary>
        [JsonProperty("expires_in_minutes")]
        public int? ExpiresInMinutes { get; set; }
        /// <summary>
        /// An optional description for the rule.
        /// </summary>
        [JsonProperty("description")]
        public string Description { get; set; }
        /// <summary>
        /// The CIDR block we want to set a rule for. You may pass either an IP address or a CIDR block. The CIDR
        /// block prefix must be between 16 and 32, inclusive. If an end user's IP address is within this CIDR
        /// block, this rule will be applied. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("cidr_block")]
        public string CidrBlock { get; set; }
        /// <summary>
        /// The country code we want to set a rule for. The country code must be a valid ISO 3166-1 alpha-2 code.
        /// You may not set `ALLOW` rules for country codes. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("country_code")]
        public string CountryCode { get; set; }
        /// <summary>
        /// The ASN we want to set a rule for. The ASN must be the string representation of an integer between 0 and
        /// 4294967295, inclusive. Only one identifier can be specified in the request.
        /// </summary>
        [JsonProperty("asn")]
        public string Asn { get; set; }
        public FraudRulesSetRequest(RuleAction action)
        {
            this.Action = action;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Fraud.Rules.Set"/>..
    /// </summary>
    public class FraudRulesSetResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The action that will be returned for the specified identifier.
        /// </summary>
        [JsonProperty("action")]
        public RuleAction Action { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// The visitor ID that a rule was set for.
        /// </summary>
        [JsonProperty("visitor_id")]
        public string VisitorId { get; set; }
        /// <summary>
        /// The browser ID that a rule was set for.
        /// </summary>
        [JsonProperty("browser_id")]
        public string BrowserId { get; set; }
        /// <summary>
        /// The visitor fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("visitor_fingerprint")]
        public string VisitorFingerprint { get; set; }
        /// <summary>
        /// The browser fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("browser_fingerprint")]
        public string BrowserFingerprint { get; set; }
        /// <summary>
        /// The hardware fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("hardware_fingerprint")]
        public string HardwareFingerprint { get; set; }
        /// <summary>
        /// The network fingerprint that a rule was set for.
        /// </summary>
        [JsonProperty("network_fingerprint")]
        public string NetworkFingerprint { get; set; }
        /// <summary>
        /// The timestamp when the rule expires. Values conform to the RFC 3339 standard and are expressed in UTC,
        /// e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("expires_at")]
        public DateTime? ExpiresAt { get; set; }
        /// <summary>
        /// The CIDR block that a rule was set for. If an end user's IP address is within this CIDR block, this rule
        /// will be applied.
        /// </summary>
        [JsonProperty("cidr_block")]
        public string CidrBlock { get; set; }
        /// <summary>
        /// The country code that a rule was set for.
        /// </summary>
        [JsonProperty("country_code")]
        public string CountryCode { get; set; }
        /// <summary>
        /// The ASN that a rule was set for.
        /// </summary>
        [JsonProperty("asn")]
        public string Asn { get; set; }
    }

}
