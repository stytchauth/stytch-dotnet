// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;

using Microsoft.IdentityModel.Tokens;

namespace Stytch.net.Models.Consumer
{
    public class AmazonOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class AppleOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class AuthenticationFactor
    {
        /// <summary>
        /// The type of authentication factor. The possible values are: `magic_link`, `otp`,
        ///        `oauth`, `password`, or `sso`.
        /// </summary>
        [JsonProperty("type")]
        public AuthenticationFactorType Type { get; set; }
        /// <summary>
        /// The method that was used to deliver the authentication factor. The possible values depend on the `type`: 
        ///      
        ///       `magic_link` – Only `email`.
        ///      
        ///       `otp` – Only `sms`.
        ///      
        ///       `oauth` – Either `oauth_google` or `oauth_microsoft`.
        ///      
        ///       `password` – Only `knowledge`.
        ///      
        ///       `sso` – Either `sso_saml` or `sso_oidc`.
        ///       
        /// </summary>
        [JsonProperty("delivery_method")]
        public AuthenticationFactorDeliveryMethod DeliveryMethod { get; set; }
        /// <summary>
        /// The timestamp when the factor was last authenticated.
        /// </summary>
        [JsonProperty("last_authenticated_at")]
        public DateTime? LastAuthenticatedAt { get; set; }
        /// <summary>
        /// The timestamp when the factor was initially authenticated.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// The timestamp when the factor was last updated.
        /// </summary>
        [JsonProperty("updated_at")]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Information about the email factor, if one is present.
        /// </summary>
        [JsonProperty("email_factor")]
        public EmailFactor EmailFactor { get; set; }
        /// <summary>
        /// Information about the phone number factor, if one is present.
        /// </summary>
        [JsonProperty("phone_number_factor")]
        public PhoneNumberFactor PhoneNumberFactor { get; set; }
        /// <summary>
        /// Information about the Google OAuth factor, if one is present.
        /// </summary>
        [JsonProperty("google_oauth_factor")]
        public GoogleOAuthFactor GoogleOAuthFactor { get; set; }
        /// <summary>
        /// Information about the Microsoft OAuth factor, if one is present.
        /// </summary>
        [JsonProperty("microsoft_oauth_factor")]
        public MicrosoftOAuthFactor MicrosoftOAuthFactor { get; set; }
        [JsonProperty("apple_oauth_factor")]
        public AppleOAuthFactor AppleOAuthFactor { get; set; }
        [JsonProperty("webauthn_factor")]
        public WebAuthnFactor WebAuthnFactor { get; set; }
        /// <summary>
        /// Information about the TOTP-backed Authenticator App factor, if one is present.
        /// </summary>
        [JsonProperty("authenticator_app_factor")]
        public AuthenticatorAppFactor AuthenticatorAppFactor { get; set; }
        [JsonProperty("github_oauth_factor")]
        public GithubOAuthFactor GithubOAuthFactor { get; set; }
        [JsonProperty("recovery_code_factor")]
        public RecoveryCodeFactor RecoveryCodeFactor { get; set; }
        [JsonProperty("facebook_oauth_factor")]
        public FacebookOAuthFactor FacebookOAuthFactor { get; set; }
        [JsonProperty("crypto_wallet_factor")]
        public CryptoWalletFactor CryptoWalletFactor { get; set; }
        [JsonProperty("amazon_oauth_factor")]
        public AmazonOAuthFactor AmazonOAuthFactor { get; set; }
        [JsonProperty("bitbucket_oauth_factor")]
        public BitbucketOAuthFactor BitbucketOAuthFactor { get; set; }
        [JsonProperty("coinbase_oauth_factor")]
        public CoinbaseOAuthFactor CoinbaseOAuthFactor { get; set; }
        [JsonProperty("discord_oauth_factor")]
        public DiscordOAuthFactor DiscordOAuthFactor { get; set; }
        [JsonProperty("figma_oauth_factor")]
        public FigmaOAuthFactor FigmaOAuthFactor { get; set; }
        [JsonProperty("git_lab_oauth_factor")]
        public GitLabOAuthFactor GitLabOAuthFactor { get; set; }
        [JsonProperty("instagram_oauth_factor")]
        public InstagramOAuthFactor InstagramOAuthFactor { get; set; }
        [JsonProperty("linked_in_oauth_factor")]
        public LinkedInOAuthFactor LinkedInOAuthFactor { get; set; }
        [JsonProperty("shopify_oauth_factor")]
        public ShopifyOAuthFactor ShopifyOAuthFactor { get; set; }
        [JsonProperty("slack_oauth_factor")]
        public SlackOAuthFactor SlackOAuthFactor { get; set; }
        [JsonProperty("snapchat_oauth_factor")]
        public SnapchatOAuthFactor SnapchatOAuthFactor { get; set; }
        [JsonProperty("spotify_oauth_factor")]
        public SpotifyOAuthFactor SpotifyOAuthFactor { get; set; }
        [JsonProperty("steam_oauth_factor")]
        public SteamOAuthFactor SteamOAuthFactor { get; set; }
        [JsonProperty("tik_tok_oauth_factor")]
        public TikTokOAuthFactor TikTokOAuthFactor { get; set; }
        [JsonProperty("twitch_oauth_factor")]
        public TwitchOAuthFactor TwitchOAuthFactor { get; set; }
        [JsonProperty("twitter_oauth_factor")]
        public TwitterOAuthFactor TwitterOAuthFactor { get; set; }
        [JsonProperty("embeddable_magic_link_factor")]
        public EmbeddableMagicLinkFactor EmbeddableMagicLinkFactor { get; set; }
        [JsonProperty("biometric_factor")]
        public BiometricFactor BiometricFactor { get; set; }
        /// <summary>
        /// Information about the SAML SSO factor, if one is present.
        /// </summary>
        [JsonProperty("saml_sso_factor")]
        public SAMLSSOFactor SAMLSSOFactor { get; set; }
        /// <summary>
        /// Information about the OIDC SSO factor, if one is present.
        /// </summary>
        [JsonProperty("oidc_sso_factor")]
        public OIDCSSOFactor OIDCSSOFactor { get; set; }
        [JsonProperty("salesforce_oauth_factor")]
        public SalesforceOAuthFactor SalesforceOAuthFactor { get; set; }
        [JsonProperty("yahoo_oauth_factor")]
        public YahooOAuthFactor YahooOAuthFactor { get; set; }
        [JsonProperty("hubspot_oauth_factor")]
        public HubspotOAuthFactor HubspotOAuthFactor { get; set; }
        [JsonProperty("slack_oauth_exchange_factor")]
        public SlackOAuthExchangeFactor SlackOAuthExchangeFactor { get; set; }
        [JsonProperty("hubspot_oauth_exchange_factor")]
        public HubspotOAuthExchangeFactor HubspotOAuthExchangeFactor { get; set; }
        [JsonProperty("github_oauth_exchange_factor")]
        public GithubOAuthExchangeFactor GithubOAuthExchangeFactor { get; set; }
    }
    public class AuthenticatorAppFactor
    {
        /// <summary>
        /// Globally unique UUID that identifies a TOTP instance.
        /// </summary>
        [JsonProperty("totp_id")]
        public string TOTPId { get; set; }
    }
    public class BiometricFactor
    {
        [JsonProperty("biometric_registration_id")]
        public string BiometricRegistrationId { get; set; }
    }
    public class BitbucketOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class CoinbaseOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class CryptoWalletFactor
    {
        [JsonProperty("crypto_wallet_id")]
        public string CryptoWalletId { get; set; }
        [JsonProperty("crypto_wallet_address")]
        public string CryptoWalletAddress { get; set; }
        [JsonProperty("crypto_wallet_type")]
        public string CryptoWalletType { get; set; }
    }
    public class DiscordOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class EmailFactor
    {
        /// <summary>
        /// The globally unique UUID of the Member's email.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
    }
    public class EmbeddableMagicLinkFactor
    {
        [JsonProperty("embedded_id")]
        public string EmbeddedId { get; set; }
    }
    public class FacebookOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class FigmaOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class GitLabOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class GithubOAuthExchangeFactor
    {
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class GithubOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class GoogleOAuthFactor
    {
        /// <summary>
        /// The unique ID of an OAuth registration.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
        /// "Subject field" in OAuth protocols.
        /// </summary>
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        /// <summary>
        /// The globally unique UUID of the Member's email.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class HubspotOAuthExchangeFactor
    {
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class HubspotOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class InstagramOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class JWK
    {
        [JsonProperty("kty")]
        public string Kty { get; set; }
        [JsonProperty("use")]
        public string Use { get; set; }
        [JsonProperty("key_ops")]
        public List<string> KeyOps { get; set; }
        [JsonProperty("alg")]
        public string Alg { get; set; }
        [JsonProperty("kid")]
        public string Kid { get; set; }
        [JsonProperty("x5c")]
        public List<string> X5C { get; set; }
        [JsonProperty("x5tS256")]
        public string X5TS256 { get; set; }
        [JsonProperty("n")]
        public string N { get; set; }
        [JsonProperty("e")]
        public string E { get; set; }
    }
    public class LinkedInOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class MicrosoftOAuthFactor
    {
        /// <summary>
        /// The unique ID of an OAuth registration.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
        /// "Subject field" in OAuth protocols.
        /// </summary>
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        /// <summary>
        /// The globally unique UUID of the Member's email.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class OIDCSSOFactor
    {
        /// <summary>
        /// The unique ID of an SSO Registration.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific OIDC Connection.
        /// </summary>
        [JsonProperty("provider_id")]
        public string ProviderId { get; set; }
        /// <summary>
        /// The ID of the member given by the identity provider.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
    }
    public class PhoneNumberFactor
    {
        /// <summary>
        /// The globally unique UUID of the Member's phone number.
        /// </summary>
        [JsonProperty("phone_id")]
        public string PhoneId { get; set; }
        /// <summary>
        /// The phone number of the Member.
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
    }
    public class RecoveryCodeFactor
    {
        [JsonProperty("totp_recovery_code_id")]
        public string TOTPRecoveryCodeId { get; set; }
    }
    public class SAMLSSOFactor
    {
        /// <summary>
        /// The unique ID of an SSO Registration.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific SAML Connection.
        /// </summary>
        [JsonProperty("provider_id")]
        public string ProviderId { get; set; }
        /// <summary>
        /// The ID of the member given by the identity provider.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
    }
    public class SalesforceOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class Session
    {
        /// <summary>
        /// A unique identifier for a specific Session.
        /// </summary>
        [JsonProperty("session_id")]
        public string SessionId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// An array of different authentication factors that comprise a Session.
        /// </summary>
        [JsonProperty("authentication_factors")]
        public List<AuthenticationFactor> AuthenticationFactors { get; set; }
        /// <summary>
        /// The timestamp when the Session was created. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("started_at")]
        public DateTime? StartedAt { get; set; }
        /// <summary>
        /// The timestamp when the Session was last accessed. Values conform to the RFC 3339 standard and are
        /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("last_accessed_at")]
        public DateTime? LastAccessedAt { get; set; }
        /// <summary>
        /// The timestamp when the Session expires. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("expires_at")]
        public DateTime? ExpiresAt { get; set; }
        /// <summary>
        /// Provided attributes help with fraud detection.
        /// </summary>
        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }
        /// <summary>
        /// The custom claims map for a Session. Claims can be added to a session during a Sessions authenticate
        /// call.
        /// </summary>
        [JsonProperty("custom_claims")]
        public object CustomClaims { get; set; }
    }
    public class ShopifyOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class SlackOAuthExchangeFactor
    {
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class SlackOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class SnapchatOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class SpotifyOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class SteamOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class TikTokOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class TwitchOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class TwitterOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    public class WebAuthnFactor
    {
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        [JsonProperty("domain")]
        public string Domain { get; set; }
        [JsonProperty("user_agent")]
        public string UserAgent { get; set; }
    }
    public class YahooOAuthFactor
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Sessions.Authenticate"/>..
    /// </summary>
    public class SessionsAuthenticateRequest
    {
        /// <summary>
        /// The session token to authenticate.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now; minimum of 5 and a maximum of 527040 minutes
        /// (366 days). Note that a successful authentication will continue to extend the session this many minutes.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// The JWT to authenticate. You may provide a JWT that has expired according to its `exp` claim and needs
        /// to be refreshed. If the signature is valid and the underlying session is still active then Stytch will
        /// return a new JWT.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object SessionCustomClaims { get; set; }
        public SessionsAuthenticateRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Sessions.Authenticate"/>..
    /// </summary>
    public class SessionsAuthenticateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session Session { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Sessions.GetJWKS"/>., <see
    /// cref="Stytch.net.Clients.Consumer.Sessions.GetJWKS"/>..
    /// </summary>
    public class SessionsGetJWKSRequest
    {
        /// <summary>
        /// The `project_id` to get the JWKS for.
        /// </summary>
        [JsonProperty("project_id")]
        public string ProjectId { get; set; }
        public SessionsGetJWKSRequest(string projectId)
        {
            this.ProjectId = projectId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Sessions.GetJWKS"/>., <see
    /// cref="Stytch.net.Clients.Consumer.Sessions.GetJWKS"/>..
    /// </summary>
    public class SessionsGetJWKSResponse
    {
        /// <summary>
        /// The JWK
        /// </summary>
        [JsonProperty("keys")]
        public List<JWK> Keys { get; set; }
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Sessions.Get"/>..
    /// </summary>
    public class SessionsGetRequest
    {
        /// <summary>
        /// The `user_id` to get active Sessions for.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        public SessionsGetRequest(string userId)
        {
            this.UserId = userId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Sessions.Get"/>..
    /// </summary>
    public class SessionsGetResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// An array of Session objects.
        /// </summary>
        [JsonProperty("sessions")]
        public List<Session> Sessions { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Sessions.Migrate"/>..
    /// </summary>
    public class SessionsMigrateRequest
    {
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist, 
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        ///   
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        ///   
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object SessionCustomClaims { get; set; }
        public SessionsMigrateRequest(string sessionToken)
        {
            this.SessionToken = sessionToken;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Sessions.Migrate"/>..
    /// </summary>
    public class SessionsMigrateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session Session { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Sessions.Revoke"/>..
    /// </summary>
    public class SessionsRevokeRequest
    {
        /// <summary>
        /// The `session_id` to revoke.
        /// </summary>
        [JsonProperty("session_id")]
        public string SessionId { get; set; }
        /// <summary>
        /// The session token to revoke.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// A JWT for the session to revoke.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        public SessionsRevokeRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Sessions.Revoke"/>..
    /// </summary>
    public class SessionsRevokeResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum AuthenticationFactorDeliveryMethod
    {
        [EnumMember(Value = "email")]
        EMAIL,
        [EnumMember(Value = "sms")]
        SMS,
        [EnumMember(Value = "whatsapp")]
        WHATSAPP,
        [EnumMember(Value = "embedded")]
        EMBEDDED,
        [EnumMember(Value = "oauth_google")]
        OAUTH_GOOGLE,
        [EnumMember(Value = "oauth_microsoft")]
        OAUTH_MICROSOFT,
        [EnumMember(Value = "oauth_apple")]
        OAUTH_APPLE,
        [EnumMember(Value = "webauthn_registration")]
        WEBAUTHN_REGISTRATION,
        [EnumMember(Value = "authenticator_app")]
        AUTHENTICATOR_APP,
        [EnumMember(Value = "oauth_github")]
        OAUTH_GITHUB,
        [EnumMember(Value = "recovery_code")]
        RECOVERY_CODE,
        [EnumMember(Value = "oauth_facebook")]
        OAUTH_FACEBOOK,
        [EnumMember(Value = "crypto_wallet")]
        CRYPTO_WALLET,
        [EnumMember(Value = "oauth_amazon")]
        OAUTH_AMAZON,
        [EnumMember(Value = "oauth_bitbucket")]
        OAUTH_BITBUCKET,
        [EnumMember(Value = "oauth_coinbase")]
        OAUTH_COINBASE,
        [EnumMember(Value = "oauth_discord")]
        OAUTH_DISCORD,
        [EnumMember(Value = "oauth_figma")]
        OAUTH_FIGMA,
        [EnumMember(Value = "oauth_gitlab")]
        OAUTH_GITLAB,
        [EnumMember(Value = "oauth_instagram")]
        OAUTH_INSTAGRAM,
        [EnumMember(Value = "oauth_linkedin")]
        OAUTH_LINKEDIN,
        [EnumMember(Value = "oauth_shopify")]
        OAUTH_SHOPIFY,
        [EnumMember(Value = "oauth_slack")]
        OAUTH_SLACK,
        [EnumMember(Value = "oauth_snapchat")]
        OAUTH_SNAPCHAT,
        [EnumMember(Value = "oauth_spotify")]
        OAUTH_SPOTIFY,
        [EnumMember(Value = "oauth_steam")]
        OAUTH_STEAM,
        [EnumMember(Value = "oauth_tiktok")]
        OAUTH_TIKTOK,
        [EnumMember(Value = "oauth_twitch")]
        OAUTH_TWITCH,
        [EnumMember(Value = "oauth_twitter")]
        OAUTH_TWITTER,
        [EnumMember(Value = "knowledge")]
        KNOWLEDGE,
        [EnumMember(Value = "biometric")]
        BIOMETRIC,
        [EnumMember(Value = "sso_saml")]
        SSO_SAML,
        [EnumMember(Value = "sso_oidc")]
        SSO_OIDC,
        [EnumMember(Value = "oauth_salesforce")]
        OAUTH_SALESFORCE,
        [EnumMember(Value = "oauth_yahoo")]
        OAUTH_YAHOO,
        [EnumMember(Value = "oauth_hubspot")]
        OAUTH_HUBSPOT,
        [EnumMember(Value = "imported_auth0")]
        IMPORTED_AUTH0,
        [EnumMember(Value = "oauth_exchange_slack")]
        OAUTH_EXCHANGE_SLACK,
        [EnumMember(Value = "oauth_exchange_hubspot")]
        OAUTH_EXCHANGE_HUBSPOT,
        [EnumMember(Value = "oauth_exchange_github")]
        OAUTH_EXCHANGE_GITHUB,
    }
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AuthenticationFactorType
    {
        [EnumMember(Value = "magic_link")]
        MAGIC_LINK,
        [EnumMember(Value = "otp")]
        OTP,
        [EnumMember(Value = "oauth")]
        OAUTH,
        [EnumMember(Value = "webauthn")]
        WEBAUTHN,
        [EnumMember(Value = "totp")]
        TOTP,
        [EnumMember(Value = "crypto")]
        CRYPTO,
        [EnumMember(Value = "password")]
        PASSWORD,
        [EnumMember(Value = "signature_challenge")]
        SIGNATURE_CHALLENGE,
        [EnumMember(Value = "sso")]
        SSO,
        [EnumMember(Value = "imported")]
        IMPORTED,
        [EnumMember(Value = "recovery_codes")]
        RECOVERY_CODES,
    }
    // MANUAL(AuthenticateJWT)(TYPES)
    // ADDIMPORT: using Microsoft.IdentityModel.Tokens;
    public class AuthenticateJwtRequest
    {
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        public string SessionJwt { get; set; }

        /// <summary>
        /// Configures the acceptable amount of clock skew when validating timestamps.
        /// </summary>
        public TimeSpan ClockSkew { get; set; } = TimeSpan.FromMinutes(1);

        /// <summary>
        /// Gets or sets a delegate that will be used to validate the lifetime of the token
        /// </summary>
        public LifetimeValidator LifetimeValidator { get; set; }

        public AuthenticateJwtRequest(string sessionJwt)
        {
            SessionJwt = sessionJwt;
        }
    }

    public class AuthenticateJwtLocalRequest
    {
        public string SessionJwt { get; set; }
        public TimeSpan ClockSkew { get; set; } = TimeSpan.FromMinutes(1);

        /// <summary>
        /// Gets or sets a delegate that will be used to validate the lifetime of the token
        /// </summary>
        public LifetimeValidator LifetimeValidator { get; set; }

        public AuthenticateJwtLocalRequest(string sessionJwt)
        {
            SessionJwt = sessionJwt;
        }
    }

    // ENDMANUAL(AuthenticateJWT)

}