// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Stytch.net.Models.Consumer
{
    public class BiometricRegistration
    {
        /// <summary>
        /// The unique ID for a biometric registration.
        /// </summary>
        [JsonProperty("biometric_registration_id")]
        public string BiometricRegistrationId { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
    }
    public class CryptoWallet
    {
        /// <summary>
        /// The unique ID for a crypto wallet
        /// </summary>
        [JsonProperty("crypto_wallet_id")]
        public string CryptoWalletId { get; set; }
        /// <summary>
        /// The actual blockchain address of the User's crypto wallet.
        /// </summary>
        [JsonProperty("crypto_wallet_address")]
        public string CryptoWalletAddress { get; set; }
        /// <summary>
        /// The blockchain that the User's crypto wallet operates on, e.g. Ethereum, Solana, etc.
        /// </summary>
        [JsonProperty("crypto_wallet_type")]
        public string CryptoWalletType { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
    }
    public class OAuthProvider
    {
        /// <summary>
        /// Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Facebook, GitHub
        /// etc.
        /// </summary>
        [JsonProperty("provider_type")]
        public string ProviderType { get; set; }
        /// <summary>
        /// The unique identifier for the User within a given OAuth provider. Also commonly called the "sub" or
        /// "Subject field" in OAuth protocols.
        /// </summary>
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        /// <summary>
        /// If available, the `profile_picture_url` is a url of the User's profile picture set in OAuth identity the
        /// provider that the User has authenticated with, e.g. Facebook profile picture.
        /// </summary>
        [JsonProperty("profile_picture_url")]
        public string ProfilePictureURL { get; set; }
        /// <summary>
        /// If available, the `locale` is the User's locale set in the OAuth identity provider that the user has
        /// authenticated with.
        /// </summary>
        [JsonProperty("locale")]
        public string Locale { get; set; }
        /// <summary>
        /// The unique ID for an OAuth registration.
        /// </summary>
        [JsonProperty("oauth_user_registration_id")]
        public string OAuthUserRegistrationId { get; set; }
    }
    public class Password
    {
        /// <summary>
        /// The unique ID of a specific password
        /// </summary>
        [JsonProperty("password_id")]
        public string PasswordId { get; set; }
        /// <summary>
        /// Indicates whether this password requires a password reset
        /// </summary>
        [JsonProperty("requires_reset")]
        public bool RequiresReset { get; set; }
    }
    public class SearchUsersQuery
    {
        /// <summary>
        /// The action to perform on the operands. The accepted value are:
        /// 
        ///   `AND` – all the operand values provided must match.
        ///   
        ///   `OR` – the operator will return any matches to at least one of the operand values you supply.
        /// </summary>
        [JsonProperty("operator")]
        public SearchUsersQueryOperator Operator { get; set; }
        /// <summary>
        /// An array of operand objects that contains all of the filters and values to apply to your search search
        /// query.
        /// </summary>
        [JsonProperty("operands")]
        public List<SearchUsersQueryOperand> Operands { get; set; }
    }
    public class TOTP
    {
        /// <summary>
        /// The unique ID for a TOTP instance.
        /// </summary>
        [JsonProperty("totp_id")]
        public string TOTPId { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
    }
    public class User
    {
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// An array of email objects for the User.
        /// </summary>
        [JsonProperty("emails")]
        public List<UsersEmail> Emails { get; set; }
        /// <summary>
        /// The status of the User. The possible values are `pending` and `active`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; set; }
        /// <summary>
        /// An array of phone number objects linked to the User.
        /// </summary>
        [JsonProperty("phone_numbers")]
        public List<UsersPhoneNumber> PhoneNumbers { get; set; }
        /// <summary>
        /// An array that contains a list of all Passkey or WebAuthn registrations for a given User in the Stytch
        /// API.
        /// </summary>
        [JsonProperty("webauthn_registrations")]
        public List<WebAuthnRegistration> WebAuthnRegistrations { get; set; }
        /// <summary>
        /// An array of OAuth `provider` objects linked to the User.
        /// </summary>
        [JsonProperty("providers")]
        public List<OAuthProvider> Providers { get; set; }
        /// <summary>
        /// An array containing a list of all TOTP instances for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("totps")]
        public List<TOTP> TOTPs { get; set; }
        /// <summary>
        /// An array contains a list of all crypto wallets for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("crypto_wallets")]
        public List<CryptoWallet> CryptoWallets { get; set; }
        /// <summary>
        /// An array that contains a list of all biometric registrations for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("biometric_registrations")]
        public List<BiometricRegistration> BiometricRegistrations { get; set; }
        /// <summary>
        /// The name of the User. Each field in the `name` object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName Name { get; set; }
        /// <summary>
        /// The timestamp of the User's creation. Values conform to the RFC 3339 standard and are expressed in UTC,
        /// e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// The password object is returned for users with a password.
        /// </summary>
        [JsonProperty("password")]
        public Password Password { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
    }
    public class UsersEmail
    {
        /// <summary>
        /// The unique ID of a specific email address.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        /// <summary>
        /// The email address.
        /// </summary>
        [JsonProperty("email")]
        public string Email { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
    }
    public class UsersName
    {
        /// <summary>
        /// The first name of the user.
        /// </summary>
        [JsonProperty("first_name")]
        public string FirstName { get; set; }
        /// <summary>
        /// The middle name(s) of the user.
        /// </summary>
        [JsonProperty("middle_name")]
        public string MiddleName { get; set; }
        /// <summary>
        /// The last name of the user.
        /// </summary>
        [JsonProperty("last_name")]
        public string LastName { get; set; }
    }
    public class UsersPhoneNumber
    {
        /// <summary>
        /// The unique ID for the phone number.
        /// </summary>
        [JsonProperty("phone_id")]
        public string PhoneId { get; set; }
        /// <summary>
        /// The phone number.
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
    }
    public class UsersResultsMetadata
    {
        /// <summary>
        /// The total number of results returned by your search query.
        /// </summary>
        [JsonProperty("total")]
        public int Total { get; set; }
        /// <summary>
        /// The `next_cursor` string is returned when your search result contains more than one page of results.
        /// This value is passed into your next search call in the `cursor` field.
        /// </summary>
        [JsonProperty("next_cursor")]
        public string NextCursor { get; set; }
    }
    public class WebAuthnRegistration
    {
        /// <summary>
        /// The unique ID for the Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        /// <summary>
        /// The `domain` on which Passkey or WebAuthn registration was started. This will be the domain of your app.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }
        /// <summary>
        /// The user agent of the User.
        /// </summary>
        [JsonProperty("user_agent")]
        public string UserAgent { get; set; }
        /// <summary>
        /// The verified boolean denotes whether or not this send method, e.g. phone number, email address, etc.,
        /// has been successfully authenticated by the User.
        /// </summary>
        [JsonProperty("verified")]
        public bool Verified { get; set; }
        /// <summary>
        /// The `authenticator_type` string displays the requested authenticator type of the Passkey or WebAuthn
        /// device. The two valid types are "platform" and "cross-platform". If no value is present, the Passkey or
        /// WebAuthn device was created without an authenticator type preference.
        /// </summary>
        [JsonProperty("authenticator_type")]
        public string AuthenticatorType { get; set; }
        /// <summary>
        /// The `name` of the Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.Create"/>..
    /// </summary>
    public class UsersCreateRequest
    {
        /// <summary>
        /// The email address of the end user.
        /// </summary>
        [JsonProperty("email")]
        public string Email { get; set; }
        /// <summary>
        /// The name of the user. Each field in the name object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName Name { get; set; }
        /// <summary>
        /// Provided attributes help with fraud detection.
        /// </summary>
        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }
        /// <summary>
        /// The phone number to use for one-time passcodes. The phone number should be in E.164 format (i.e.
        /// +1XXXXXXXXXX). You may use +10000000000 to test this endpoint, see
        /// [Testing](https://stytch.com/docs/home#resources_testing) for more detail.
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Flag for whether or not to save a user as pending vs active in Stytch. Defaults to false.
        ///         If true, users will be saved with status pending in Stytch's backend until authenticated.
        ///         If false, users will be created as active. An example usage of
        ///         a true flag would be to require users to verify their phone by entering the OTP code before
        /// creating
        ///         an account for them.
        /// </summary>
        [JsonProperty("create_user_as_pending")]
        public bool? CreateUserAsPending { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
        public UsersCreateRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.Create"/>..
    /// </summary>
    public class UsersCreateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The unique ID of a specific email address.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        /// <summary>
        /// The status of the User. The possible values are `pending` and `active`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; set; }
        /// <summary>
        /// The unique ID for the phone number.
        /// </summary>
        [JsonProperty("phone_id")]
        public string PhoneId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteBiometricRegistration"/>..
    /// </summary>
    public class UsersDeleteBiometricRegistrationRequest
    {
        /// <summary>
        /// The `biometric_registration_id` to be deleted.
        /// </summary>
        [JsonProperty("biometric_registration_id")]
        public string BiometricRegistrationId { get; set; }
        public UsersDeleteBiometricRegistrationRequest(string biometricRegistrationId)
        {
            this.BiometricRegistrationId = biometricRegistrationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteBiometricRegistration"/>..
    /// </summary>
    public class UsersDeleteBiometricRegistrationResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteCryptoWallet"/>..
    /// </summary>
    public class UsersDeleteCryptoWalletRequest
    {
        /// <summary>
        /// The `crypto_wallet_id` to be deleted.
        /// </summary>
        [JsonProperty("crypto_wallet_id")]
        public string CryptoWalletId { get; set; }
        public UsersDeleteCryptoWalletRequest(string cryptoWalletId)
        {
            this.CryptoWalletId = cryptoWalletId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteCryptoWallet"/>..
    /// </summary>
    public class UsersDeleteCryptoWalletResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteEmail"/>..
    /// </summary>
    public class UsersDeleteEmailRequest
    {
        /// <summary>
        /// The `email_id` to be deleted.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        public UsersDeleteEmailRequest(string emailId)
        {
            this.EmailId = emailId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteEmail"/>..
    /// </summary>
    public class UsersDeleteEmailResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteOAuthRegistration"/>..
    /// </summary>
    public class UsersDeleteOAuthRegistrationRequest
    {
        /// <summary>
        /// The `oauth_user_registration_id` to be deleted.
        /// </summary>
        [JsonProperty("oauth_user_registration_id")]
        public string OAuthUserRegistrationId { get; set; }
        public UsersDeleteOAuthRegistrationRequest(string oauthUserRegistrationId)
        {
            this.OAuthUserRegistrationId = oauthUserRegistrationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteOAuthRegistration"/>..
    /// </summary>
    public class UsersDeleteOAuthRegistrationResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeletePassword"/>..
    /// </summary>
    public class UsersDeletePasswordRequest
    {
        /// <summary>
        /// The `password_id` to be deleted.
        /// </summary>
        [JsonProperty("password_id")]
        public string PasswordId { get; set; }
        public UsersDeletePasswordRequest(string passwordId)
        {
            this.PasswordId = passwordId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeletePassword"/>..
    /// </summary>
    public class UsersDeletePasswordResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeletePhoneNumber"/>..
    /// </summary>
    public class UsersDeletePhoneNumberRequest
    {
        /// <summary>
        /// The `phone_id` to be deleted.
        /// </summary>
        [JsonProperty("phone_id")]
        public string PhoneId { get; set; }
        public UsersDeletePhoneNumberRequest(string phoneId)
        {
            this.PhoneId = phoneId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeletePhoneNumber"/>..
    /// </summary>
    public class UsersDeletePhoneNumberResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.Delete"/>..
    /// </summary>
    public class UsersDeleteRequest
    {
        /// <summary>
        /// The unique ID of a specific User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        public UsersDeleteRequest(string userId)
        {
            this.UserId = userId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.Delete"/>..
    /// </summary>
    public class UsersDeleteResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the deleted User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteTOTP"/>..
    /// </summary>
    public class UsersDeleteTOTPRequest
    {
        /// <summary>
        /// The `totp_id` to be deleted.
        /// </summary>
        [JsonProperty("totp_id")]
        public string TOTPId { get; set; }
        public UsersDeleteTOTPRequest(string totpId)
        {
            this.TOTPId = totpId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteTOTP"/>..
    /// </summary>
    public class UsersDeleteTOTPResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteWebAuthnRegistration"/>..
    /// </summary>
    public class UsersDeleteWebAuthnRegistrationRequest
    {
        /// <summary>
        /// The `webauthn_registration_id` to be deleted.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        public UsersDeleteWebAuthnRegistrationRequest(string webauthnRegistrationId)
        {
            this.WebAuthnRegistrationId = webauthnRegistrationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.DeleteWebAuthnRegistration"/>..
    /// </summary>
    public class UsersDeleteWebAuthnRegistrationResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.ExchangePrimaryFactor"/>..
    /// </summary>
    public class UsersExchangePrimaryFactorRequest
    {
        /// <summary>
        /// The unique ID of a specific User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The email address to exchange to.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        /// <summary>
        /// The phone number to exchange to. The phone number should be in E.164 format (i.e. +1XXXXXXXXXX).
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        public UsersExchangePrimaryFactorRequest(string userId)
        {
            this.UserId = userId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.ExchangePrimaryFactor"/>..
    /// </summary>
    public class UsersExchangePrimaryFactorResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.Get"/>..
    /// </summary>
    public class UsersGetRequest
    {
        /// <summary>
        /// The unique ID of a specific User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        public UsersGetRequest(string userId)
        {
            this.UserId = userId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.Get"/>..
    /// </summary>
    public class UsersGetResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the returned User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// An array of email objects for the User.
        /// </summary>
        [JsonProperty("emails")]
        public List<UsersEmail> Emails { get; set; }
        /// <summary>
        /// The status of the User. The possible values are `pending` and `active`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; set; }
        /// <summary>
        /// An array of phone number objects linked to the User.
        /// </summary>
        [JsonProperty("phone_numbers")]
        public List<UsersPhoneNumber> PhoneNumbers { get; set; }
        /// <summary>
        /// An array that contains a list of all Passkey or WebAuthn registrations for a given User in the Stytch
        /// API.
        /// </summary>
        [JsonProperty("webauthn_registrations")]
        public List<WebAuthnRegistration> WebAuthnRegistrations { get; set; }
        /// <summary>
        /// An array of OAuth `provider` objects linked to the User.
        /// </summary>
        [JsonProperty("providers")]
        public List<OAuthProvider> Providers { get; set; }
        /// <summary>
        /// An array containing a list of all TOTP instances for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("totps")]
        public List<TOTP> TOTPs { get; set; }
        /// <summary>
        /// An array contains a list of all crypto wallets for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("crypto_wallets")]
        public List<CryptoWallet> CryptoWallets { get; set; }
        /// <summary>
        /// An array that contains a list of all biometric registrations for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("biometric_registrations")]
        public List<BiometricRegistration> BiometricRegistrations { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// The name of the User. Each field in the `name` object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName Name { get; set; }
        /// <summary>
        /// The timestamp of the User's creation. Values conform to the RFC 3339 standard and are expressed in UTC,
        /// e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// The password object is returned for users with a password.
        /// </summary>
        [JsonProperty("password")]
        public Password Password { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.Search"/>..
    /// </summary>
    public class UsersSearchRequest
    {
        /// <summary>
        /// The `cursor` field allows you to paginate through your results. Each result array is limited to 1000
        /// results. If your query returns more than 1000 results, you will need to paginate the responses using the
        /// `cursor`. If you receive a response that includes a non-null `next_cursor` in the `results_metadata`
        /// object, repeat the search call with the `next_cursor` value set to the `cursor` field to retrieve the
        /// next page of results. Continue to make search calls until the `next_cursor` in the response is null.
        /// </summary>
        [JsonProperty("cursor")]
        public string Cursor { get; set; }
        /// <summary>
        /// The number of search results to return per page. The default limit is 100. A maximum of 1000 results can
        /// be returned by a single search request. If the total size of your result set is greater than one page
        /// size, you must paginate the response. See the `cursor` field.
        /// </summary>
        [JsonProperty("limit")]
        public uint? Limit { get; set; }
        /// <summary>
        /// The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that will filter
        /// your results. Only an operator is required. If you include no operands, no filtering will be applied. If
        /// you include no query object, it will return all results with no filtering applied.
        /// </summary>
        [JsonProperty("query")]
        public SearchUsersQuery Query { get; set; }
        public UsersSearchRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.Search"/>..
    /// </summary>
    public class UsersSearchResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// An array of results that match your search query.
        /// </summary>
        [JsonProperty("results")]
        public List<User> Results { get; set; }
        /// <summary>
        /// The search `results_metadata` object contains metadata relevant to your specific query like total and
        /// `next_cursor`.
        /// </summary>
        [JsonProperty("results_metadata")]
        public UsersResultsMetadata ResultsMetadata { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Users.Update"/>..
    /// </summary>
    public class UsersUpdateRequest
    {
        /// <summary>
        /// The unique ID of a specific User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The name of the user. Each field in the name object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName Name { get; set; }
        /// <summary>
        /// Provided attributes help with fraud detection.
        /// </summary>
        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
        public UsersUpdateRequest(string userId)
        {
            this.UserId = userId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Users.Update"/>..
    /// </summary>
    public class UsersUpdateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the updated User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// An array of email objects for the User.
        /// </summary>
        [JsonProperty("emails")]
        public List<UsersEmail> Emails { get; set; }
        /// <summary>
        /// An array of phone number objects linked to the User.
        /// </summary>
        [JsonProperty("phone_numbers")]
        public List<UsersPhoneNumber> PhoneNumbers { get; set; }
        /// <summary>
        /// An array contains a list of all crypto wallets for a given User in the Stytch API.
        /// </summary>
        [JsonProperty("crypto_wallets")]
        public List<CryptoWallet> CryptoWallets { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum SearchUsersQueryOperator
    {
        [EnumMember(Value = "OR")]
        OR,
        [EnumMember(Value = "AND")]
        AND,
    }
    // MANUAL(SearchUsersQueryOperand)(TYPES)

    public abstract class SearchUsersQueryOperand
    {
        [JsonProperty("filter_name")]
        public abstract string FilterName { get; }
    }

    public class CreatedAtGreaterThanFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "created_at_greater_than";
        [JsonProperty("filter_value")]
        public string FilterValue { get; set; } // Timestamp in RFC 3339 format
    }

    public class CreatedAtLessThanFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "created_at_less_than";
        [JsonProperty("filter_value")]
        public string FilterValue { get; set; } // Timestamp in RFC 3339 format
    }

    public class CreatedAtBetweenFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "created_at_between";
        [JsonProperty("greater_than")]
        public string GreaterThan { get; set; } // Timestamp in RFC 3339 format
        [JsonProperty("less_than")]
        public string LessThan { get; set; } // Timestamp in RFC 3339 format
    }

    public class StatusFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "status";
        [JsonProperty("filter_value")]
        public string FilterValue { get; set; } // "active" or "pending"
    }

    public class OauthProviderFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "oauth_provider";
        [JsonProperty("filter_value")]
        public List<string> FilterValue { get; set; }
    }

    public class UserIdFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "user_id";
        [JsonProperty("filter_value")]
        public List<string> FilterValue { get; set; }
    }

    public class PhoneNumberFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "phone_number";
        [JsonProperty("filter_value")]
        public List<string> FilterValue { get; set; }
    }

    public class EmailVerifiedFilter : SearchUsersQueryOperand
    {
        public override string FilterName => "email_verified";
        [JsonProperty("filter_value")]
        public bool FilterValue { get; set; }
    }

    // ENDMANUAL(SearchUsersQueryOperand)

}
