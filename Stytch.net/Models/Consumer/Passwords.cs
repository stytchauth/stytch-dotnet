// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Stytch.net.Models.Consumer
{
    public class Argon2Config
    {
        /// <summary>
        /// The salt value.
        /// </summary>
        [JsonProperty("salt")]
        public required string Salt { get; set; }
        /// <summary>
        /// The iteration amount.
        /// </summary>
        [JsonProperty("iteration_amount")]
        public required int IterationAmount { get; set; }
        /// <summary>
        /// The memory in kibibytes.
        /// </summary>
        [JsonProperty("memory")]
        public required int Memory { get; set; }
        /// <summary>
        /// The thread value, also known as the parallelism factor.
        /// </summary>
        [JsonProperty("threads")]
        public required int Threads { get; set; }
        /// <summary>
        /// The key length, also known as the hash length.
        /// </summary>
        [JsonProperty("key_length")]
        public required int KeyLength { get; set; }
    }
    public class Feedback
    {
        /// <summary>
        /// For `zxcvbn` validation, contains an end user consumable warning if the password is valid but not strong
        /// enough.
        /// </summary>
        [JsonProperty("warning")]
        public required string Warning { get; set; }
        /// <summary>
        /// For `zxcvbn` validation, contains end user consumable suggestions on how to improve the strength of the
        /// password.
        /// </summary>
        [JsonProperty("suggestions")]
        public required List<string> Suggestions { get; set; }
        /// <summary>
        /// Contains which LUDS properties are fulfilled by the password and which are missing to convert an invalid
        /// password into a valid one. You'll use these fields to provide feedback to the user on how to improve the
        /// password.
        /// </summary>
        [JsonProperty("luds_requirements")]
        public LUDSRequirements? LudsRequirements { get; set; }
    }
    public class LUDSRequirements
    {
        /// <summary>
        /// For LUDS validation, whether the password contains at least one lowercase letter.
        /// </summary>
        [JsonProperty("has_lower_case")]
        public required bool HasLowerCase { get; set; }
        /// <summary>
        /// For LUDS validation, whether the password contains at least one uppercase letter.
        /// </summary>
        [JsonProperty("has_upper_case")]
        public required bool HasUpperCase { get; set; }
        /// <summary>
        /// For LUDS validation, whether the password contains at least one digit.
        /// </summary>
        [JsonProperty("has_digit")]
        public required bool HasDigit { get; set; }
        /// <summary>
        /// For LUDS validation, whether the password contains at least one symbol. Any UTF8 character outside of
        /// a-z or A-Z may count as a valid symbol.
        /// </summary>
        [JsonProperty("has_symbol")]
        public required bool HasSymbol { get; set; }
        /// <summary>
        /// For LUDS validation, the number of complexity requirements that are missing from the password. Check the
        /// complexity fields to see which requirements are missing.
        /// </summary>
        [JsonProperty("missing_complexity")]
        public required int MissingComplexity { get; set; }
        /// <summary>
        /// For LUDS validation, this is the required length of the password that you've set minus the length of the
        /// password being checked. The user will need to add this many characters to the password to make it valid.
        /// </summary>
        [JsonProperty("missing_characters")]
        public required int MissingCharacters { get; set; }
    }
    public class MD5Config
    {
        /// <summary>
        /// The salt that should be prepended to the migrated password.
        /// </summary>
        [JsonProperty("prepend_salt")]
        public required string PrependSalt { get; set; }
        /// <summary>
        /// The salt that should be appended to the migrated password.
        /// </summary>
        [JsonProperty("append_salt")]
        public required string AppendSalt { get; set; }
    }
    public class PBKDF2Config
    {
        /// <summary>
        /// The salt value, which should be in a base64 encoded string form.
        /// </summary>
        [JsonProperty("salt")]
        public required string Salt { get; set; }
        /// <summary>
        /// The iteration amount.
        /// </summary>
        [JsonProperty("iteration_amount")]
        public required int IterationAmount { get; set; }
        /// <summary>
        /// The key length, also known as the hash length.
        /// </summary>
        [JsonProperty("key_length")]
        public required int KeyLength { get; set; }
    }
    public class SHA1Config
    {
        /// <summary>
        /// The salt that should be prepended to the migrated password.
        /// </summary>
        [JsonProperty("prepend_salt")]
        public required string PrependSalt { get; set; }
        /// <summary>
        /// The salt that should be appended to the migrated password.
        /// </summary>
        [JsonProperty("append_salt")]
        public required string AppendSalt { get; set; }
    }
    public class ScryptConfig
    {
        /// <summary>
        /// The salt value, which should be in a base64 encoded string form.
        /// </summary>
        [JsonProperty("salt")]
        public required string Salt { get; set; }
        /// <summary>
        /// The N value, also known as the iterations count. It must be a power of two greater than 1 and less than
        /// 262,145. 
        ///       If your application's N parameter is larger than 262,144, please reach out to
        /// [support@stytch.com](mailto:support@stytch.com)
        /// </summary>
        [JsonProperty("n_parameter")]
        public required int NParameter { get; set; }
        /// <summary>
        /// The r parameter, also known as the block size.
        /// </summary>
        [JsonProperty("r_parameter")]
        public required int RParameter { get; set; }
        /// <summary>
        /// The p parameter, also known as the parallelism factor.
        /// </summary>
        [JsonProperty("p_parameter")]
        public required int PParameter { get; set; }
        /// <summary>
        /// The key length, also known as the hash length.
        /// </summary>
        [JsonProperty("key_length")]
        public required int KeyLength { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Passwords.Authenticate"/>..
    /// </summary>
    public class PasswordsAuthenticateRequest
    {
        /// <summary>
        /// The email address of the end user.
        /// </summary>
        [JsonProperty("email")]
        public required string Email { get; set; }
        /// <summary>
        /// The password for the user. Any UTF8 character is allowed, e.g. spaces, emojis, non-English characers,
        /// etc.
        /// </summary>
        [JsonProperty("password")]
        public required string Password { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string? SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist, 
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        ///   
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        ///   
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string? SessionJwt { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object? SessionCustomClaims { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Passwords.Authenticate"/>..
    /// </summary>
    public class PasswordsAuthenticateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public required string UserId { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public required string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public required string SessionJwt { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public required User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session? Session { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Passwords.Create"/>..
    /// </summary>
    public class PasswordsCreateRequest
    {
        /// <summary>
        /// The email address of the end user.
        /// </summary>
        [JsonProperty("email")]
        public required string Email { get; set; }
        /// <summary>
        /// The password for the user. Any UTF8 character is allowed, e.g. spaces, emojis, non-English characers,
        /// etc.
        /// </summary>
        [JsonProperty("password")]
        public required string Password { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist, 
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        ///   
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        ///   
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object? SessionCustomClaims { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object? TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object? UntrustedMetadata { get; set; }
        /// <summary>
        /// The name of the user. Each field in the name object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName? Name { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Passwords.Create"/>..
    /// </summary>
    public class PasswordsCreateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public required string UserId { get; set; }
        /// <summary>
        /// The unique ID of a specific email address.
        /// </summary>
        [JsonProperty("email_id")]
        public required string EmailId { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public required string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public required string SessionJwt { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public required User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session? Session { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Passwords.Migrate"/>..
    /// </summary>
    public class PasswordsMigrateRequest
    {
        /// <summary>
        /// The email address of the end user.
        /// </summary>
        [JsonProperty("email")]
        public required string Email { get; set; }
        /// <summary>
        /// The password hash. For a Scrypt or PBKDF2 hash, the hash needs to be a base64 encoded string.
        /// </summary>
        [JsonProperty("hash")]
        public required string Hash { get; set; }
        /// <summary>
        /// The password hash used. Currently `bcrypt`, `scrypt`, `argon_2i`, `argon_2id`, `md_5`, `sha_1`, and
        /// `pbkdf_2` are supported.
        /// </summary>
        [JsonProperty("hash_type")]
        public required PasswordsMigrateRequestHashType HashType { get; set; }
        /// <summary>
        /// Optional parameters for MD-5 hash types.
        /// </summary>
        [JsonProperty("md_5_config")]
        public MD5Config? Md5Config { get; set; }
        /// <summary>
        /// Required parameters if the argon2 hex form, as opposed to the encoded form, is supplied.
        /// </summary>
        [JsonProperty("argon_2_config")]
        public Argon2Config? Argon2Config { get; set; }
        /// <summary>
        /// Optional parameters for SHA-1 hash types.
        /// </summary>
        [JsonProperty("sha_1_config")]
        public SHA1Config? Sha1Config { get; set; }
        /// <summary>
        /// Required parameters if the scrypt is not provided in a
        /// [PHC encoded form](https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md#phc-string-format).
        /// </summary>
        [JsonProperty("scrypt_config")]
        public ScryptConfig? ScryptConfig { get; set; }
        /// <summary>
        /// Required additional parameters for PBKDF2 hash keys.
        /// </summary>
        [JsonProperty("pbkdf_2_config")]
        public PBKDF2Config? Pbkdf2Config { get; set; }
        /// <summary>
        /// The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
        /// [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object? TrustedMetadata { get; set; }
        /// <summary>
        /// The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
        /// metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
        /// information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
        /// behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object? UntrustedMetadata { get; set; }
        /// <summary>
        /// Whether to set the user's email as verified. This is a dangerous field. Incorrect use may lead to users
        /// getting erroneously 
        ///                 deduplicated into one user object. This flag should only be set if you can attest that
        /// the user owns the email address in question.
        ///                 Access to this field is restricted. To enable it, please send us a note at
        /// support@stytch.com.
        /// </summary>
        [JsonProperty("set_email_verified")]
        public bool? SetEmailVerified { get; set; }
        /// <summary>
        /// The name of the user. Each field in the name object is optional.
        /// </summary>
        [JsonProperty("name")]
        public UsersName? Name { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Passwords.Migrate"/>..
    /// </summary>
    public class PasswordsMigrateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public required string UserId { get; set; }
        /// <summary>
        /// The unique ID of a specific email address.
        /// </summary>
        [JsonProperty("email_id")]
        public required string EmailId { get; set; }
        /// <summary>
        /// In `login_or_create` endpoints, this field indicates whether or not a User was just created.
        /// </summary>
        [JsonProperty("user_created")]
        public required bool UserCreated { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public required User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.Passwords.StrengthCheck"/>..
    /// </summary>
    public class PasswordsStrengthCheckRequest
    {
        /// <summary>
        /// The password for the user. Any UTF8 character is allowed, e.g. spaces, emojis, non-English characers,
        /// etc.
        /// </summary>
        [JsonProperty("password")]
        public required string Password { get; set; }
        /// <summary>
        /// The email address of the end user.
        /// </summary>
        [JsonProperty("email")]
        public string? Email { get; set; }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.Passwords.StrengthCheck"/>..
    /// </summary>
    public class PasswordsStrengthCheckResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public required string RequestId { get; set; }
        /// <summary>
        /// Returns `true` if the password passes our password validation. We offer two validation options,
        /// [zxcvbn](https://stytch.com/docs/passwords#strength-requirements) is the default option which offers a
        /// high level of sophistication. We also offer
        /// [LUDS](https://stytch.com/docs/passwords#strength-requirements). If an email address is included in the
        /// call we also require that the password hasn't been compromised using built-in breach detection powered
        /// by [HaveIBeenPwned](https://haveibeenpwned.com/).
        /// </summary>
        [JsonProperty("valid_password")]
        public required bool ValidPassword { get; set; }
        /// <summary>
        /// The score of the password determined by [zxcvbn](https://github.com/dropbox/zxcvbn). Values will be
        /// between 1 and 4, a 3 or greater is required to pass validation.
        /// </summary>
        [JsonProperty("score")]
        public required int Score { get; set; }
        /// <summary>
        /// Returns `true` if the password has been breached. Powered by
        /// [HaveIBeenPwned](https://haveibeenpwned.com/).
        /// </summary>
        [JsonProperty("breached_password")]
        public required bool BreachedPassword { get; set; }
        /// <summary>
        /// The strength policy type enforced, either `zxcvbn` or `luds`.
        /// </summary>
        [JsonProperty("strength_policy")]
        public required string StrengthPolicy { get; set; }
        /// <summary>
        /// Will return `true` if breach detection will be evaluated. By default this option is enabled. This option
        /// can be disabled by contacting
        /// [support@stytch.com](mailto:support@stytch.com?subject=Password%20strength%20configuration). If this
        /// value is `false` then `breached_password` will always be `false` as well.
        /// </summary>
        [JsonProperty("breach_detection_on_create")]
        public required bool BreachDetectionOnCreate { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public required int StatusCode { get; set; }
        /// <summary>
        /// Feedback for how to improve the password's strength [HaveIBeenPwned](https://haveibeenpwned.com/).
        /// </summary>
        [JsonProperty("feedback")]
        public Feedback? Feedback { get; set; }
    }

    public enum PasswordsMigrateRequestHashType
    {
        [EnumMember(Value = "bcrypt")]
        BCRYPT,
        [EnumMember(Value = "md_5")]
        MD_5,
        [EnumMember(Value = "argon_2i")]
        ARGON_2I,
        [EnumMember(Value = "argon_2id")]
        ARGON_2ID,
        [EnumMember(Value = "sha_1")]
        SHA_1,
        [EnumMember(Value = "scrypt")]
        SCRYPT,
        [EnumMember(Value = "phpass")]
        PHPASS,
        [EnumMember(Value = "pbkdf_2")]
        PBKDF_2,
    }
}