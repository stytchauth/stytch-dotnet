// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Stytch.net.Models.Consumer
{
// Request type for `webauthn.authenticate`.
    public class WebAuthnAuthenticateRequest {
      /**
    * The response of the
    * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
    */
      [JsonProperty("public_key_credential")]
      public required string PublicKeyCredential { get; set; }
      // The `session_token` associated with a User's existing Session.
      [JsonProperty("session_token")]
      public string? SessionToken { get; set; }
      /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist, 
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *   
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *   
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    */
      [JsonProperty("session_duration_minutes")]
      public int? SessionDurationMinutes { get; set; }
      // The `session_jwt` associated with a User's existing Session.
      [JsonProperty("session_jwt")]
      public string? SessionJwt { get; set; }
      /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    * 
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
    */
      [JsonProperty("session_custom_claims")]
      public object? SessionCustomClaims { get; set; }
    }
// Response type for `webauthn.authenticate`.
    public class WebAuthnAuthenticateResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // The unique ID for the Passkey or WebAuthn registration.
      [JsonProperty("webauthn_registration_id")]
      public required string WebAuthnRegistrationId { get; set; }
      // A secret token for a given Stytch Session.
      [JsonProperty("session_token")]
      public required string SessionToken { get; set; }
      // The JSON Web Token (JWT) for a given Stytch Session.
      [JsonProperty("session_jwt")]
      public required string SessionJwt { get; set; }
      /**
    * The `user` object affected by this API call. See the
    * [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    */
      [JsonProperty("user")]
      public required User User { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
      /**
    * If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
    * receive a full Session object in the response.
    * 
    *   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    *   
    */
      [JsonProperty("session")]
      public Session? Session { get; set; }
    }
// Request type for `webauthn.authenticateStart`.
    public class WebAuthnAuthenticateStartRequest {
      // The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`.
      [JsonProperty("domain")]
      public required string Domain { get; set; }
      // The `user_id` of an active user the Passkey or WebAuthn registration should be tied to.
      [JsonProperty("user_id")]
      public string? UserId { get; set; }
      /**
    * If true, the `public_key_credential_creation_options` returned will be optimized for Passkeys with
    * `userVerification` set to `"preferred"`.
    *       
    */
      [JsonProperty("return_passkey_credential_options")]
      public bool? ReturnPasskeyCredentialOptions { get; set; }
    }
// Response type for `webauthn.authenticateStart`.
    public class WebAuthnAuthenticateStartResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // Options used for Passkey or WebAuthn authentication.
      [JsonProperty("public_key_credential_request_options")]
      public required string PublicKeyCredentialRequestOptions { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
    }
// Request type for `webauthn.register`.
    public class WebAuthnRegisterRequest {
      // The `user_id` of an active user the Passkey or WebAuthn registration should be tied to.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      /**
    * The response of the
    * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
    */
      [JsonProperty("public_key_credential")]
      public required string PublicKeyCredential { get; set; }
      // The `session_token` associated with a User's existing Session.
      [JsonProperty("session_token")]
      public string? SessionToken { get; set; }
      /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist, 
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *   
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *   
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    */
      [JsonProperty("session_duration_minutes")]
      public int? SessionDurationMinutes { get; set; }
      // The `session_jwt` associated with a User's existing Session.
      [JsonProperty("session_jwt")]
      public string? SessionJwt { get; set; }
      /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    * 
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
    */
      [JsonProperty("session_custom_claims")]
      public object? SessionCustomClaims { get; set; }
    }
// Response type for `webauthn.register`.
    public class WebAuthnRegisterResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // The unique ID for the Passkey or WebAuthn registration.
      [JsonProperty("webauthn_registration_id")]
      public required string WebAuthnRegistrationId { get; set; }
      // A secret token for a given Stytch Session.
      [JsonProperty("session_token")]
      public required string SessionToken { get; set; }
      // The JSON Web Token (JWT) for a given Stytch Session.
      [JsonProperty("session_jwt")]
      public required string SessionJwt { get; set; }
      [JsonProperty("user")]
      public required User User { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
      /**
    * If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
    * receive a full Session object in the response.
    * 
    *   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    *   
    */
      [JsonProperty("session")]
      public Session? Session { get; set; }
    }
// Request type for `webauthn.registerStart`.
    public class WebAuthnRegisterStartRequest {
      // The `user_id` of an active user the Passkey or WebAuthn registration should be tied to.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`.
      [JsonProperty("domain")]
      public required string Domain { get; set; }
      // The user agent of the User.
      [JsonProperty("user_agent")]
      public string? UserAgent { get; set; }
      /**
    * The requested authenticator type of the Passkey or WebAuthn device. The two valid values are platform
    * and cross-platform. If no value passed, we assume both values are allowed.
    */
      [JsonProperty("authenticator_type")]
      public string? AuthenticatorType { get; set; }
      /**
    * If true, the `public_key_credential_creation_options` returned will be optimized for Passkeys with
    * `residentKey` set to `"required"` and `userVerification` set to `"preferred"`.
    *       
    */
      [JsonProperty("return_passkey_credential_options")]
      public bool? ReturnPasskeyCredentialOptions { get; set; }
    }
// Response type for `webauthn.registerStart`.
    public class WebAuthnRegisterStartResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      // The unique ID of the affected User.
      [JsonProperty("user_id")]
      public required string UserId { get; set; }
      // Options used for Passkey or WebAuthn registration.
      [JsonProperty("public_key_credential_creation_options")]
      public required string PublicKeyCredentialCreationOptions { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
    }
// Request type for `webauthn.update`.
    public class WebAuthnUpdateRequest {
      /**
    * Globally unique UUID that identifies a Passkey or WebAuthn registration in the Stytch API. The
    * `webauthn_registration_id` is used when you need to operate on a specific User's WebAuthn registration.
    */
      [JsonProperty("webauthn_registration_id")]
      public required string WebAuthnRegistrationId { get; set; }
      // The `name` of the WebAuthn registration or Passkey.
      [JsonProperty("name")]
      public required string Name { get; set; }
    }
// Response type for `webauthn.update`.
    public class WebAuthnUpdateResponse {
      /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    */
      [JsonProperty("request_id")]
      public required string RequestId { get; set; }
      /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    */
      [JsonProperty("status_code")]
      public required int StatusCode { get; set; }
      // A Passkey or WebAuthn registration.
      [JsonProperty("webauthn_registration")]
      public WebAuthnRegistration? WebAuthnRegistration { get; set; }
    }

}