// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Stytch.net.Models
{
    public class WebAuthnCredential
    {
        /// <summary>
        /// The unique, public ID of the WebAuthn credential.
        /// </summary>
        [JsonProperty("credential_id")]
        public string CredentialId { get; set; }
        /// <summary>
        /// The unique ID for the Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        /// <summary>
        /// The type of the WebAuthn credential. Examples include `public-key`.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        /// <summary>
        /// The public key for the WebAuthn credential in base64 format.
        /// </summary>
        [JsonProperty("public_key")]
        public string PublicKey { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Authenticate"/>..
    /// </summary>
    public class WebAuthnAuthenticateRequest
    {
        /// <summary>
        /// The response of the
        /// [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
        /// </summary>
        [JsonProperty("public_key_credential")]
        public string PublicKeyCredential { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist,
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        /// 
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        /// 
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object SessionCustomClaims { get; set; }
        /// <summary>
        /// If the `telemetry_id` is passed, as part of this request, Stytch will call the
        /// [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
        /// fingerprints and IPGEO information for the User. Your workspace must be enabled for Device
        /// Fingerprinting to use this feature.
        /// </summary>
        [JsonProperty("telemetry_id")]
        public string TelemetryId { get; set; }
        public WebAuthnAuthenticateRequest(string publicKeyCredential)
        {
            this.PublicKeyCredential = publicKeyCredential;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Authenticate"/>..
    /// </summary>
    public class WebAuthnAuthenticateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The unique ID for the Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// The `user` object affected by this API call. See the
        /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
        /// </summary>
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session Session { get; set; }
        /// <summary>
        /// If a valid `telemetry_id` was passed in the request and the
        /// [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) returned results, the
        /// `user_device` response field will contain information about the user's device attributes.
        /// </summary>
        [JsonProperty("user_device")]
        public DeviceInfo UserDevice { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.AuthenticateStart"/>..
    /// </summary>
    public class WebAuthnAuthenticateStartRequest
    {
        /// <summary>
        /// The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }
        /// <summary>
        /// The `user_id` of an active user the Passkey or WebAuthn registration should be tied to. You may use an
        /// `external_id` here if one is set for the user.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// If true, the `public_key_credential_creation_options` returned will be optimized for Passkeys with
        /// `userVerification` set to `"preferred"`.
        ///       
        /// </summary>
        [JsonProperty("return_passkey_credential_options")]
        public bool? ReturnPasskeyCredentialOptions { get; set; }
        public WebAuthnAuthenticateStartRequest(string domain)
        {
            this.Domain = domain;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.AuthenticateStart"/>..
    /// </summary>
    public class WebAuthnAuthenticateStartResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// Options used for Passkey or WebAuthn authentication.
        /// </summary>
        [JsonProperty("public_key_credential_request_options")]
        public string PublicKeyCredentialRequestOptions { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.ListCredentials"/>..
    /// </summary>
    public class WebAuthnListCredentialsRequest
    {
        /// <summary>
        /// The `user_id` of an active user the Passkey or WebAuthn registration should be tied to.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }
        public WebAuthnListCredentialsRequest(string userId, string domain)
        {
            this.UserId = userId;
            this.Domain = domain;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.ListCredentials"/>..
    /// </summary>
    public class WebAuthnListCredentialsResponse
    {
        /// <summary>
        /// A list of WebAuthn credential objects.
        /// </summary>
        [JsonProperty("credentials")]
        public List<WebAuthnCredential> Credentials { get; set; }
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Register"/>..
    /// </summary>
    public class WebAuthnRegisterRequest
    {
        /// <summary>
        /// The `user_id` of an active user the Passkey or WebAuthn registration should be tied to. You may use an
        /// `external_id` here if one is set for the user.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The response of the
        /// [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
        /// </summary>
        [JsonProperty("public_key_credential")]
        public string PublicKeyCredential { get; set; }
        /// <summary>
        /// The `session_token` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist,
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        /// 
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        /// 
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// The `session_jwt` associated with a User's existing Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
        /// object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
        /// supply a null value.
        /// 
        ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
        /// ignored. Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object SessionCustomClaims { get; set; }
        /// <summary>
        /// If the `telemetry_id` is passed, as part of this request, Stytch will call the
        /// [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
        /// fingerprints and IPGEO information for the User. Your workspace must be enabled for Device
        /// Fingerprinting to use this feature.
        /// </summary>
        [JsonProperty("telemetry_id")]
        public string TelemetryId { get; set; }
        public WebAuthnRegisterRequest(string userId, string publicKeyCredential)
        {
            this.UserId = userId;
            this.PublicKeyCredential = publicKeyCredential;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Register"/>..
    /// </summary>
    public class WebAuthnRegisterResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The unique ID for the Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        [JsonProperty("user")]
        public User User { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
        /// receive a full Session object in the response.
        /// 
        ///   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
        ///   
        /// </summary>
        [JsonProperty("session")]
        public Session Session { get; set; }
        /// <summary>
        /// If a valid `telemetry_id` was passed in the request and the
        /// [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) returned results, the
        /// `user_device` response field will contain information about the user's device attributes.
        /// </summary>
        [JsonProperty("user_device")]
        public DeviceInfo UserDevice { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.RegisterStart"/>..
    /// </summary>
    public class WebAuthnRegisterStartRequest
    {
        /// <summary>
        /// The `user_id` of an active user the Passkey or WebAuthn registration should be tied to. You may use an
        /// `external_id` here if one is set for the user.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }
        /// <summary>
        /// The user agent of the client.
        /// </summary>
        [JsonProperty("user_agent")]
        public string UserAgent { get; set; }
        /// <summary>
        /// The requested authenticator type of the Passkey or WebAuthn device. The two valid values are platform
        /// and cross-platform. If no value passed, we assume both values are allowed.
        /// </summary>
        [JsonProperty("authenticator_type")]
        public string AuthenticatorType { get; set; }
        /// <summary>
        /// If true, the `public_key_credential_creation_options` returned will be optimized for Passkeys with
        /// `residentKey` set to `"required"` and `userVerification` set to `"preferred"`.
        ///       
        /// </summary>
        [JsonProperty("return_passkey_credential_options")]
        public bool? ReturnPasskeyCredentialOptions { get; set; }
        [JsonProperty("override_id")]
        public string OverrideId { get; set; }
        [JsonProperty("override_name")]
        public string OverrideName { get; set; }
        [JsonProperty("override_display_name")]
        public string OverrideDisplayName { get; set; }
        [JsonProperty("use_base64_url_encoding")]
        public bool? UseBase64URLEncoding { get; set; }
        public WebAuthnRegisterStartRequest(string userId, string domain)
        {
            this.UserId = userId;
            this.Domain = domain;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.RegisterStart"/>..
    /// </summary>
    public class WebAuthnRegisterStartResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The unique ID of the affected User.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; }
        /// <summary>
        /// Options used for Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("public_key_credential_creation_options")]
        public string PublicKeyCredentialCreationOptions { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Update"/>..
    /// </summary>
    public class WebAuthnUpdateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a Passkey or WebAuthn registration in the Stytch API. The
        /// `webauthn_registration_id` is used when you need to operate on a specific User's WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration_id")]
        public string WebAuthnRegistrationId { get; set; }
        /// <summary>
        /// The `name` of the WebAuthn registration or Passkey.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        public WebAuthnUpdateRequest(string webauthnRegistrationId, string name)
        {
            this.WebAuthnRegistrationId = webauthnRegistrationId;
            this.Name = name;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.Consumer.WebAuthn.Update"/>..
    /// </summary>
    public class WebAuthnUpdateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// A Passkey or WebAuthn registration.
        /// </summary>
        [JsonProperty("webauthn_registration")]
        public WebAuthnRegistration WebAuthnRegistration { get; set; }
    }

}
