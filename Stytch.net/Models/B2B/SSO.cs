// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Stytch.net.Models.Consumer
{
    public class B2BSSODeleteConnectionRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BSSOGetConnectionsRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class Connection
    {
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        [JsonProperty("external_organization_id")]
        public string ExternalOrganizationId { get; set; }
        [JsonProperty("external_connection_id")]
        public string ExternalConnectionId { get; set; }
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("external_connection_implicit_role_assignments")]
        public List<ConnectionImplicitRoleAssignment> ExternalConnectionImplicitRoleAssignments { get; set; }
        [JsonProperty("external_group_implicit_role_assignments")]
        public List<GroupImplicitRoleAssignment> ExternalGroupImplicitRoleAssignments { get; set; }
    }
    public class ConnectionImplicitRoleAssignment
    {
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
    }
    public class GroupImplicitRoleAssignment
    {
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
        [JsonProperty("group")]
        public string Group { get; set; }
    }
    public class OIDCConnection
    {
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
        [JsonProperty("redirect_url")]
        public string RedirectURL { get; set; }
        [JsonProperty("client_id")]
        public string ClientId { get; set; }
        [JsonProperty("client_secret")]
        public string ClientSecret { get; set; }
        [JsonProperty("issuer")]
        public string Issuer { get; set; }
        [JsonProperty("authorization_url")]
        public string AuthorizationURL { get; set; }
        [JsonProperty("token_url")]
        public string TokenURL { get; set; }
        [JsonProperty("userinfo_url")]
        public string UserinfoURL { get; set; }
        [JsonProperty("jwks_url")]
        public string JWKSURL { get; set; }
        [JsonProperty("identity_provider")]
        public string IdentityProvider { get; set; }
        [JsonProperty("custom_scopes")]
        public string CustomScopes { get; set; }
        [JsonProperty("attribute_mapping")]
        public object AttributeMapping { get; set; }
    }
    public class SAMLConnection
    {
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("idp_entity_id")]
        public string IdpEntityId { get; set; }
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
        [JsonProperty("idp_sso_url")]
        public string IdpSSOURL { get; set; }
        [JsonProperty("acs_url")]
        public string AcsURL { get; set; }
        [JsonProperty("audience_uri")]
        public string AudienceUri { get; set; }
        [JsonProperty("signing_certificates")]
        public List<X509Certificate> SigningCertificates { get; set; }
        [JsonProperty("verification_certificates")]
        public List<X509Certificate> VerificationCertificates { get; set; }
        [JsonProperty("saml_connection_implicit_role_assignments")]
        public List<SAMLConnectionImplicitRoleAssignment> SAMLConnectionImplicitRoleAssignments { get; set; }
        [JsonProperty("saml_group_implicit_role_assignments")]
        public List<SAMLGroupImplicitRoleAssignment> SAMLGroupImplicitRoleAssignments { get; set; }
        [JsonProperty("alternative_audience_uri")]
        public string AlternativeAudienceUri { get; set; }
        [JsonProperty("identity_provider")]
        public string IdentityProvider { get; set; }
        [JsonProperty("attribute_mapping")]
        public object AttributeMapping { get; set; }
    }
    public class SAMLConnectionImplicitRoleAssignment
    {
        /// <summary>
        /// The unique identifier of the RBAC Role, provided by the developer and intended to be human-readable.  
        ///   
        ///   Reserved `role_id`s that are predefined by Stytch include: 
        ///   
        ///   * `stytch_member`
        ///   * `stytch_admin`
        ///   
        ///   Check out the [guide on Stytch default Roles](https://stytch.com/docs/b2b/guides/rbac/stytch-default)
        /// for a more detailed explanation.
        /// 
        ///   
        /// </summary>
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
    }
    public class SAMLGroupImplicitRoleAssignment
    {
        /// <summary>
        /// The unique identifier of the RBAC Role, provided by the developer and intended to be human-readable.  
        ///   
        ///   Reserved `role_id`s that are predefined by Stytch include: 
        ///   
        ///   * `stytch_member`
        ///   * `stytch_admin`
        ///   
        ///   Check out the [guide on Stytch default Roles](https://stytch.com/docs/b2b/guides/rbac/stytch-default)
        /// for a more detailed explanation.
        /// 
        ///   
        /// </summary>
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
        /// <summary>
        /// The name of the SAML group that grants the specified role assignment.
        /// </summary>
        [JsonProperty("group")]
        public string Group { get; set; }
    }
    public class X509Certificate
    {
        [JsonProperty("certificate_id")]
        public string CertificateId { get; set; }
        [JsonProperty("certificate")]
        public string Certificate { get; set; }
        [JsonProperty("issuer")]
        public string Issuer { get; set; }
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        [JsonProperty("expires_at")]
        public DateTime? ExpiresAt { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.SSO.Authenticate"/>..
    /// </summary>
    public class B2BSSOAuthenticateRequest
    {
        /// <summary>
        /// The token to authenticate.
        /// </summary>
        [JsonProperty("sso_token")]
        public string SSOToken { get; set; }
        /// <summary>
        /// A base64url encoded one time secret used to validate that the request starts and ends on the same device.
        /// </summary>
        [JsonProperty("pkce_code_verifier")]
        public string PkceCodeVerifier { get; set; }
        /// <summary>
        /// The `session_token` belonging to the member that you wish to associate the email with.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The `session_jwt` belonging to the member that you wish to associate the email with.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
        /// already exist, 
        ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
        /// `session_jwt` will have a fixed lifetime of
        ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
        /// 
        ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
        ///   
        ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
        /// extend the session this many minutes.
        ///   
        ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
        /// 60 minute duration. If you don't want
        ///   to use the Stytch session product, you can ignore the session fields in the response.
        /// </summary>
        [JsonProperty("session_duration_minutes")]
        public int? SessionDurationMinutes { get; set; }
        /// <summary>
        /// Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
        /// initialized by providing a value in
        ///   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
        /// key in an existing Session, supply a new value. To
        ///   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
        /// `exp`, `nbf`, `iat`, `jti`) will be ignored.
        ///   Total custom claims size cannot exceed four kilobytes.
        /// </summary>
        [JsonProperty("session_custom_claims")]
        public object SessionCustomClaims { get; set; }
        /// <summary>
        /// If the Member needs to complete an MFA step, and the Member has a phone number, this endpoint will
        /// pre-emptively send a one-time passcode (OTP) to the Member's phone number. The locale argument will be
        /// used to determine which language to use when sending the passcode.
        /// 
        /// Parameter is a [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/),
        /// e.g. `"en"`.
        /// 
        /// Currently supported languages are English (`"en"`), Spanish (`"es"`), and Brazilian Portuguese
        /// (`"pt-br"`); if no value is provided, the copy defaults to English.
        /// 
        /// Request support for additional languages
        /// [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
        /// 
        /// </summary>
        [JsonProperty("locale")]
        public B2BSSOAuthenticateRequestLocale Locale { get; set; }
        /// <summary>
        /// Adds this primary authentication factor to the intermediate session token. If the resulting set of
        /// factors satisfies the organization's primary authentication requirements and MFA requirements, the
        /// intermediate session token will be consumed and converted to a member session. If not, the same
        /// intermediate session token will be returned.
        /// </summary>
        [JsonProperty("intermediate_session_token")]
        public string IntermediateSessionToken { get; set; }
        public B2BSSOAuthenticateRequest(string ssoToken)
        {
            this.SSOToken = ssoToken;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.SSO.Authenticate"/>..
    /// </summary>
    public class B2BSSOAuthenticateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// A secret token for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_token")]
        public string SessionToken { get; set; }
        /// <summary>
        /// The JSON Web Token (JWT) for a given Stytch Session.
        /// </summary>
        [JsonProperty("session_jwt")]
        public string SessionJwt { get; set; }
        /// <summary>
        /// Indicates if all Sessions linked to the Member need to be reset. You should check this field if you
        /// aren't using
        ///     Stytch's Session product. If you are using Stytch's Session product, we revoke the Member’s other
        /// Sessions for you.
        /// </summary>
        [JsonProperty("reset_session")]
        public bool ResetSession { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The returned Intermediate Session Token contains an SSO factor associated with the Member. If this value
        /// is non-empty, the member must complete an MFA step to finish logging in to the Organization. The token
        /// can be used with the
        /// [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms),
        /// [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), or
        /// [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete an
        /// MFA flow and log in to the Organization. SSO factors are not transferable between Organizations, so the
        /// intermediate session token is not valid for use with discovery endpoints.
        /// </summary>
        [JsonProperty("intermediate_session_token")]
        public string IntermediateSessionToken { get; set; }
        /// <summary>
        /// Indicates whether the Member is fully authenticated. If false, the Member needs to complete an MFA step
        /// to log in to the Organization.
        /// </summary>
        [JsonProperty("member_authenticated")]
        public bool MemberAuthenticated { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
        /// <summary>
        /// The [Session object](https://stytch.com/docs/b2b/api/session-object).
        /// </summary>
        [JsonProperty("member_session")]
        public MemberSession MemberSession { get; set; }
        /// <summary>
        /// Information about the MFA requirements of the Organization and the Member's options for fulfilling MFA.
        /// </summary>
        [JsonProperty("mfa_required")]
        public MfaRequired MfaRequired { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.SSO.DeleteConnection"/>..
    /// </summary>
    public class B2BSSODeleteConnectionRequest
    {
        /// <summary>
        /// The organization ID that the SSO connection belongs to.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The ID of the SSO connection. Both SAML and OIDC connection IDs can be provided.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        public B2BSSODeleteConnectionRequest(string organizationId, string connectionId)
        {
            this.OrganizationId = organizationId;
            this.ConnectionId = connectionId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.SSO.DeleteConnection"/>..
    /// </summary>
    public class B2BSSODeleteConnectionResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The `connection_id` that was deleted as part of the delete request.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.SSO.GetConnections"/>..
    /// </summary>
    public class B2BSSOGetConnectionsRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        public B2BSSOGetConnectionsRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.SSO.GetConnections"/>..
    /// </summary>
    public class B2BSSOGetConnectionsResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The list of [SAML Connections](https://stytch.com/docs/b2b/api/saml-connection-object) owned by this
        /// organization.
        /// </summary>
        [JsonProperty("saml_connections")]
        public List<SAMLConnection> SAMLConnections { get; set; }
        /// <summary>
        /// The list of [OIDC Connections](https://stytch.com/docs/b2b/api/oidc-connection-object) owned by this
        /// organization.
        /// </summary>
        [JsonProperty("oidc_connections")]
        public List<OIDCConnection> OIDCConnections { get; set; }
        [JsonProperty("external_connections")]
        public List<Connection> ExternalConnections { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum B2BSSOAuthenticateRequestLocale
    {
        [EnumMember(Value = "en")]
        EN,
        [EnumMember(Value = "es")]
        ES,
        [EnumMember(Value = "pt-br")]
        PTBR,
    }
}
