// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;


namespace Stytch.net.Models.Consumer
{
    public class ActiveSCIMConnection
    {
        /// <summary>
        /// The ID of the SCIM connection.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        /// <summary>
        /// A human-readable display name for the connection.
        /// </summary>
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
        [JsonProperty("bearer_token_last_four")]
        public string BearerTokenLastFour { get; set; }
        [JsonProperty("bearer_token_expires_at")]
        public DateTime? BearerTokenExpiresAt { get; set; }
    }
    public class ActiveSSOConnection
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        /// <summary>
        /// A human-readable display name for the connection.
        /// </summary>
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
    }
    public class B2BOrganizationsDeleteRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsResultsMetadata
    {
        /// <summary>
        /// The total number of results returned by your search query.
        /// </summary>
        [JsonProperty("total")]
        public int Total { get; set; }
        /// <summary>
        /// The `next_cursor` string is returned when your search result contains more than one page of results.
        /// This value is passed into your next search call in the `cursor` field.
        /// </summary>
        [JsonProperty("next_cursor")]
        public string NextCursor { get; set; }
    }
    public class B2BOrganizationsUpdateRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class EmailImplicitRoleAssignment
    {
        /// <summary>
        /// Email domain that grants the specified Role.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }
        /// <summary>
        /// The unique identifier of the RBAC Role, provided by the developer and intended to be human-readable.  
        ///   
        ///   Reserved `role_id`s that are predefined by Stytch include: 
        ///   
        ///   * `stytch_member`
        ///   * `stytch_admin`
        ///   
        ///   Check out the [guide on Stytch default Roles](https://stytch.com/docs/b2b/guides/rbac/stytch-default)
        /// for a more detailed explanation.
        /// 
        ///   
        /// </summary>
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
    }
    public class GithubProviderInfo
    {
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("provider_tenant_ids")]
        public List<string> ProviderTenantIds { get; set; }
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
    }
    public class HubspOTPRoviderInfo
    {
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("provider_tenant_id")]
        public string ProviderTenantId { get; set; }
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }
        [JsonProperty("access_token_expires_in")]
        public int AccessTokenExpiresIn { get; set; }
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
        [JsonProperty("refresh_token")]
        public string RefreshToken { get; set; }
    }
    public class Member
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        /// <summary>
        /// The status of the Member. The possible values are: `pending`, `invited`, `active`, or `deleted`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; set; }
        /// <summary>
        /// The name of the Member.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// An array of registered [SAML Connection](saml-connection-object) or
        /// [OIDC Connection](oidc-connection-object) objects the Member has authenticated with.
        /// </summary>
        [JsonProperty("sso_registrations")]
        public List<SSORegistration> SSORegistrations { get; set; }
        /// <summary>
        /// Identifies the Member as a break glass user - someone who has permissions to authenticate into an
        /// Organization by bypassing the Organization's settings. A break glass account is typically used for
        /// emergency purposes to gain access outside of normal authentication procedures. Refer to the
        /// [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
        /// more details.
        /// </summary>
        [JsonProperty("is_breakglass")]
        public bool IsBreakglass { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a Member's password.
        /// </summary>
        [JsonProperty("member_password_id")]
        public string MemberPasswordId { get; set; }
        /// <summary>
        /// A list of OAuth registrations for this member.
        /// </summary>
        [JsonProperty("oauth_registrations")]
        public List<OAuthRegistration> OAuthRegistrations { get; set; }
        /// <summary>
        /// Whether or not the Member's email address is verified.
        /// </summary>
        [JsonProperty("email_address_verified")]
        public bool EmailAddressVerified { get; set; }
        /// <summary>
        /// Whether or not the Member's phone number is verified.
        /// </summary>
        [JsonProperty("mfa_phone_number_verified")]
        public bool MfaPhoneNumberVerified { get; set; }
        /// <summary>
        /// Whether or not the Member has the `stytch_admin` Role. This Role is automatically granted to Members 
        ///   who create an Organization through the
        /// [discovery flow](https://stytch.com/docs/b2b/api/create-organization-via-discovery). See the
        ///   [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/stytch-default) for more details on this Role.
        /// </summary>
        [JsonProperty("is_admin")]
        public bool IsAdmin { get; set; }
        [JsonProperty("totp_registration_id")]
        public string TOTPRegistrationId { get; set; }
        /// <summary>
        /// 
        ///   A list of retired email addresses for this member.
        ///   A previously active email address can be marked as retired in one of two ways:
        ///   - It's replaced with a new primary email address during an explicit Member update.
        ///   - A new email address is surfaced by an OAuth, SAML or OIDC provider. In this case the new email
        /// address becomes the
        ///   Member's primary email address and the old primary email address is retired.
        ///  
        ///   A retired email address cannot be used by other Members in the same Organization. However, unlinking
        /// retired email
        ///   addresses allows them to be subsequently re-used by other Organization Members. Retired email
        /// addresses can be unlinked
        ///   using the [Unlink Retired Email endpoint](https://stytch.com/docs/b2b/api/unlink-retired-member-email).
        ///   
        /// </summary>
        [JsonProperty("retired_email_addresses")]
        public List<RetiredEmail> RetiredEmailAddresses { get; set; }
        /// <summary>
        /// Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
        /// wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
        /// Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
        /// </summary>
        [JsonProperty("mfa_enrolled")]
        public bool MfaEnrolled { get; set; }
        /// <summary>
        /// The Member's phone number. A Member may only have one phone number.
        /// </summary>
        [JsonProperty("mfa_phone_number")]
        public string MfaPhoneNumber { get; set; }
        [JsonProperty("default_mfa_method")]
        public string DefaultMfaMethod { get; set; }
        /// <summary>
        /// Explicit or implicit Roles assigned to this Member, along with details about the role assignment source.
        ///    See the [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information
        /// about role assignment.
        /// </summary>
        [JsonProperty("roles")]
        public List<MemberRole> Roles { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// An arbitrary JSON object of application-specific data. These fields can be edited directly by the
        ///   frontend SDK, and should not be used to store critical information. See the
        /// [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
        ///   for complete field behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
        /// <summary>
        /// The timestamp of the Member's creation. Values conform to the RFC 3339 standard and are expressed in
        /// UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// The timestamp of when the Member was last updated. Values conform to the RFC 3339 standard and are
        /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("updated_at")]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// A scim member registration, referencing a [SCIM Connection](scim-connection-object) object in use for
        /// the Member creation.
        /// </summary>
        [JsonProperty("scim_registration")]
        public SCIMRegistration SCIMRegistration { get; set; }
    }
    public class MemberRole
    {
        /// <summary>
        /// The unique identifier of the RBAC Role, provided by the developer and intended to be human-readable.  
        ///   
        ///   Reserved `role_id`s that are predefined by Stytch include: 
        ///   
        ///   * `stytch_member`
        ///   * `stytch_admin`
        ///   
        ///   Check out the [guide on Stytch default Roles](https://stytch.com/docs/b2b/guides/rbac/stytch-default)
        /// for a more detailed explanation.
        /// 
        ///   
        /// </summary>
        [JsonProperty("role_id")]
        public string RoleId { get; set; }
        /// <summary>
        /// A list of sources for this role assignment. A role assignment can come from multiple sources - for
        /// example, the Role could be both explicitly assigned and implicitly granted from the Member's email
        /// domain.
        /// </summary>
        [JsonProperty("sources")]
        public List<MemberRoleSource> Sources { get; set; }
    }
    public class MemberRoleSource
    {
        /// <summary>
        /// The type of role assignment. The possible values are: 
        ///  
        ///   `direct_assignment` – an explicitly assigned Role.
        ///    
        ///   Directly assigned roles can be updated by passing in the `roles` argument to the
        ///   [Update Member](https://stytch.com/docs/b2b/api/update-member) endpoint.
        ///  
        ///   `email_assignment` – an implicit Role granted by the Member's email domain, regardless of their login
        /// method.
        ///   
        ///   Email implicit role assignments can be updated by passing in the
        /// `rbac_email_implicit_role_assignments` argument to
        ///   the [Update Organization](https://stytch.com/docs/b2b/api/update-organization) endpoint.
        ///  
        ///   `sso_connection` – an implicit Role granted by the Member's SSO connection. This is currently only
        /// available
        ///   for SAML connections and not for OIDC. If the Member has a SAML Member registration with the given
        /// connection, this
        ///   role assignment will appear in the list. However, for authorization check purposes (in
        ///   [sessions authenticate](https://stytch.com/docs/b2b/api/authenticate-session) or in any endpoint that
        /// enforces RBAC with session
        ///   headers), the Member will only be granted the Role if their session contains an authentication factor
        /// with the
        ///   specified SAML connection.
        ///   
        ///   SAML connection implicit role assignments can be updated by passing in the
        ///   `saml_connection_implicit_role_assignments` argument to the
        ///   [Update SAML connection](https://stytch.com/docs/b2b/api/update-saml-connection) endpoint.
        ///  
        ///   `sso_connection_group` – an implicit Role granted by the Member's SSO connection and group. This is
        /// currently only
        ///   available for SAML connections and not for OIDC. If the Member has a SAML Member registration with the
        /// given
        ///   connection, and belongs to a specific group within the IdP, this role assignment will appear in the
        /// list. However,
        ///   for authorization check purposes (in
        /// [sessions authenticate](https://stytch.com/docs/b2b/api/authenticate-session) or in any endpoint
        ///   that enforces RBAC with session headers), the Member will only be granted the role if their session
        /// contains an
        ///   authentication factor with the specified SAML connection.
        ///   
        ///   SAML group implicit role assignments can be updated by passing in the
        /// `saml_group_implicit_role_assignments`
        ///   argument to the [Update SAML connection](https://stytch.com/docs/b2b/api/update-saml-connection)
        /// endpoint.
        ///   
        ///     `scim_connection_group` – an implicit Role granted by the Member's SCIM connection and group. If the
        /// Member has
        ///   a SCIM Member registration with the given connection, and belongs to a specific group within the IdP,
        /// this role assignment will appear in the list.
        ///   
        ///   SCIM group implicit role assignments can be updated by passing in the
        /// `scim_group_implicit_role_assignments`
        ///   argument to the [Update SCIM connection](https://stytch.com/docs/b2b/api/update-scim-connection)
        /// endpoint.
        ///   
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        /// <summary>
        /// An object containing additional metadata about the source assignment. The fields will vary depending
        ///   on the role assignment type as follows:
        ///  
        ///   `direct_assignment` – no additional details.
        ///  
        ///   `email_assignment` – will contain the email domain that granted the assignment.
        ///   
        ///   `sso_connection` – will contain the `connection_id` of the SAML connection that granted the assignment.
        ///  
        ///   `sso_connection_group` – will contain the `connection_id` of the SAML connection and the name of the
        /// `group`
        ///   that granted the assignment.
        ///  
        ///   `scim_connection_group` – will contain the `connection_id` of the SAML connection and the `group_id`
        ///   that granted the assignment.
        ///   
        /// </summary>
        [JsonProperty("details")]
        public object Details { get; set; }
    }
    public class OAuthRegistration
    {
        /// <summary>
        /// Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Microsoft, GitHub
        /// etc.
        /// </summary>
        [JsonProperty("provider_type")]
        public string ProviderType { get; set; }
        /// <summary>
        /// The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
        /// "Subject field" in OAuth protocols.
        /// </summary>
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        /// <summary>
        /// The unique ID of an OAuth registration.
        /// </summary>
        [JsonProperty("member_oauth_registration_id")]
        public string MemberOAuthRegistrationId { get; set; }
        /// <summary>
        /// If available, the `profile_picture_url` is a URL of the User's profile picture set in OAuth identity the
        /// provider that the User has authenticated with, e.g. Google profile picture.
        /// </summary>
        [JsonProperty("profile_picture_url")]
        public string ProfilePictureURL { get; set; }
        /// <summary>
        /// If available, the `locale` is the Member's locale set in the OAuth identity provider that the user has
        /// authenticated with.
        /// </summary>
        [JsonProperty("locale")]
        public string Locale { get; set; }
    }
    public class OIDCProviderInfo
    {
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("id_token")]
        public string IdToken { get; set; }
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }
        [JsonProperty("access_token_expires_in")]
        public int AccessTokenExpiresIn { get; set; }
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        [JsonProperty("refresh_token")]
        public string RefreshToken { get; set; }
    }
    public class Organization
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The name of the Organization. Must be between 1 and 128 characters in length.
        /// </summary>
        [JsonProperty("organization_name")]
        public string OrganizationName { get; set; }
        /// <summary>
        /// The image URL of the Organization logo.
        /// </summary>
        [JsonProperty("organization_logo_url")]
        public string OrganizationLogoURL { get; set; }
        /// <summary>
        /// The unique URL slug of the Organization. The slug only accepts alphanumeric characters and the following
        /// reserved characters: `-` `.` `_` `~`. Must be between 2 and 128 characters in length.
        /// </summary>
        [JsonProperty("organization_slug")]
        public string OrganizationSlug { get; set; }
        /// <summary>
        /// The authentication setting that controls the JIT provisioning of Members when authenticating via SSO.
        /// The accepted values are:
        ///  
        ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
        /// of the Organization's `sso_active_connections`.
        ///  
        ///   `RESTRICTED` – only new Members with SSO logins that comply with
        /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
        ///   
        /// </summary>
        [JsonProperty("sso_jit_provisioning")]
        public string SSOJITProvisioning { get; set; }
        /// <summary>
        /// An array of `connection_id`s that reference
        /// [SAML Connection objects](https://stytch.com/docs/b2b/api/saml-connection-object). 
        ///   Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
        /// set to `RESTRICTED`.
        /// </summary>
        [JsonProperty("sso_jit_provisioning_allowed_connections")]
        public List<string> SSOJITProvisioningAllowedConnections { get; set; }
        /// <summary>
        /// An array of active [SAML Connection references](https://stytch.com/docs/b2b/api/saml-connection-object)
        /// or [OIDC Connection references](https://stytch.com/docs/b2b/api/oidc-connection-object).
        /// </summary>
        [JsonProperty("sso_active_connections")]
        public List<ActiveSSOConnection> SSOActiveConnections { get; set; }
        /// <summary>
        /// An array of email domains that allow invites or JIT provisioning for new Members. This list is enforced
        /// when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`. 
        ///     
        ///     
        ///     Common domains such as `gmail.com` are not allowed. See the
        /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
        /// </summary>
        [JsonProperty("email_allowed_domains")]
        public List<string> EmailAllowedDomains { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be provisioned by authenticating via Email
        /// Magic Link or OAuth. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// provisioned upon authentication via Email Magic Link or OAuth.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link and OAuth.
        ///   
        /// </summary>
        [JsonProperty("email_jit_provisioning")]
        public string EmailJITProvisioning { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be invited to an organization by email.
        /// The accepted values are: 
        ///  
        ///   `ALL_ALLOWED` – any new Member can be invited to join via email. 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// invited via email.
        ///  
        ///   `NOT_ALLOWED` – disable email invites.
        ///   
        /// </summary>
        [JsonProperty("email_invites")]
        public string EmailInvites { get; set; }
        /// <summary>
        /// The setting that controls which authentication methods can be used by Members of an Organization. The
        /// accepted values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// </summary>
        [JsonProperty("auth_methods")]
        public string AuthMethods { get; set; }
        /// <summary>
        /// An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
        /// `RESTRICTED`. 
        ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
        ///   
        /// </summary>
        [JsonProperty("allowed_auth_methods")]
        public List<string> AllowedAuthMethods { get; set; }
        [JsonProperty("mfa_policy")]
        public string MfaPolicy { get; set; }
        /// <summary>
        /// Implicit role assignments based off of email domains. 
        ///   For each domain-Role pair, all Members whose email addresses have the specified email domain will be
        /// granted the
        ///   associated Role, regardless of their login method. See the
        /// [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
        ///   for more information about role assignment.
        /// </summary>
        [JsonProperty("rbac_email_implicit_role_assignments")]
        public List<EmailImplicitRoleAssignment> RBACEmailImplicitRoleAssignments { get; set; }
        /// <summary>
        /// The setting that controls which MFA methods can be used by Members of an Organization. The accepted
        /// values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_mfa_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// </summary>
        [JsonProperty("mfa_methods")]
        public string MfaMethods { get; set; }
        /// <summary>
        /// An array of allowed MFA authentication methods. This list is enforced when `mfa_methods` is set to
        /// `RESTRICTED`.
        ///   The list's accepted values are: `sms_otp` and `totp`.
        ///   
        /// </summary>
        [JsonProperty("allowed_mfa_methods")]
        public List<string> AllowedMfaMethods { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can JIT provision into an organization by
        /// tenant. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with tenants in `allowed_oauth_tenants` can JIT provision via tenant.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning by OAuth Tenant.
        ///   
        /// </summary>
        [JsonProperty("oauth_tenant_jit_provisioning")]
        public string OAuthTenantJITProvisioning { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The timestamp of the Organization's creation. Values conform to the RFC 3339 standard and are expressed
        /// in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// The timestamp of when the Organization was last updated. Values conform to the RFC 3339 standard and are
        /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
        /// </summary>
        [JsonProperty("updated_at")]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// The default connection used for SSO when there are multiple active connections.
        /// </summary>
        [JsonProperty("sso_default_connection_id")]
        public string SSODefaultConnectionId { get; set; }
        /// <summary>
        /// An active [SCIM Connection references](https://stytch.com/docs/b2b/api/scim-connection-object).
        /// </summary>
        [JsonProperty("scim_active_connection")]
        public ActiveSCIMConnection SCIMActiveConnection { get; set; }
        /// <summary>
        /// A map of allowed OAuth tenants. If this field is not passed in, the Organization will not allow JIT
        /// provisioning by OAuth Tenant. Allowed keys are "slack" and "hubspot".
        /// </summary>
        [JsonProperty("allowed_oauth_tenants")]
        public object AllowedOAuthTenants { get; set; }
    }
    public class RetiredEmail
    {
        /// <summary>
        /// The globally unique UUID of a Member's email.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
    }
    public class SCIMRegistration
    {
        /// <summary>
        /// The ID of the SCIM connection.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        /// <summary>
        /// The unique ID of a SCIM Registration.
        /// </summary>
        [JsonProperty("registration_id")]
        public string RegistrationId { get; set; }
        /// <summary>
        /// The ID of the member given by the identity provider.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
        /// <summary>
        /// An object for storing SCIM attributes brought over from the identity provider.
        /// </summary>
        [JsonProperty("scim_attributes")]
        public SCIMAttributes SCIMAttributes { get; set; }
    }
    public class SSORegistration
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
        /// </summary>
        [JsonProperty("connection_id")]
        public string ConnectionId { get; set; }
        /// <summary>
        /// The ID of the member given by the identity provider.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
        /// <summary>
        /// The unique ID of an SSO Registration.
        /// </summary>
        [JsonProperty("registration_id")]
        public string RegistrationId { get; set; }
        /// <summary>
        /// An object for storing SSO attributes brought over from the identity provider.
        /// </summary>
        [JsonProperty("sso_attributes")]
        public object SSOAttributes { get; set; }
    }
    public class SearchQuery
    {
        /// <summary>
        /// The action to perform on the operands. The accepted value are:
        /// 
        ///   `AND` – all the operand values provided must match.
        ///   
        ///   `OR` – the operator will return any matches to at least one of the operand values you supply.
        /// </summary>
        [JsonProperty("operator")]
        public SearchQueryOperator Operator { get; set; }
        /// <summary>
        /// An array of operand objects that contains all of the filters and values to apply to your search query.
        /// </summary>
        [JsonProperty("operands")]
        public List<SearchQueryOperand> Operands { get; set; }
    }
    public class SlackProviderInfo
    {
        [JsonProperty("provider_subject")]
        public string ProviderSubject { get; set; }
        [JsonProperty("provider_tenant_id")]
        public string ProviderTenantId { get; set; }
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }
        [JsonProperty("scopes")]
        public List<string> Scopes { get; set; }
        [JsonProperty("bot_access_token")]
        public string BotAccessToken { get; set; }
        [JsonProperty("bot_scopes")]
        public List<string> BotScopes { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Create"/>..
    /// </summary>
    public class B2BOrganizationsCreateRequest
    {
        /// <summary>
        /// The name of the Organization. Must be between 1 and 128 characters in length.
        /// </summary>
        [JsonProperty("organization_name")]
        public string OrganizationName { get; set; }
        /// <summary>
        /// The unique URL slug of the Organization. The slug only accepts alphanumeric characters and the following
        /// reserved characters: `-` `.` `_` `~`. Must be between 2 and 128 characters in length.
        /// </summary>
        [JsonProperty("organization_slug")]
        public string OrganizationSlug { get; set; }
        /// <summary>
        /// The image URL of the Organization logo.
        /// </summary>
        [JsonProperty("organization_logo_url")]
        public string OrganizationLogoURL { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The authentication setting that controls the JIT provisioning of Members when authenticating via SSO.
        /// The accepted values are:
        ///  
        ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
        /// of the Organization's `sso_active_connections`.
        ///  
        ///   `RESTRICTED` – only new Members with SSO logins that comply with
        /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
        ///   
        /// </summary>
        [JsonProperty("sso_jit_provisioning")]
        public string SSOJITProvisioning { get; set; }
        /// <summary>
        /// An array of email domains that allow invites or JIT provisioning for new Members. This list is enforced
        /// when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`. 
        ///     
        ///     
        ///     Common domains such as `gmail.com` are not allowed. See the
        /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
        /// </summary>
        [JsonProperty("email_allowed_domains")]
        public List<string> EmailAllowedDomains { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be provisioned by authenticating via Email
        /// Magic Link or OAuth. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// provisioned upon authentication via Email Magic Link or OAuth.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link and OAuth.
        ///   
        /// </summary>
        [JsonProperty("email_jit_provisioning")]
        public string EmailJITProvisioning { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be invited to an organization by email.
        /// The accepted values are: 
        ///  
        ///   `ALL_ALLOWED` – any new Member can be invited to join via email. 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// invited via email.
        ///  
        ///   `NOT_ALLOWED` – disable email invites.
        ///   
        /// </summary>
        [JsonProperty("email_invites")]
        public string EmailInvites { get; set; }
        /// <summary>
        /// The setting that controls which authentication methods can be used by Members of an Organization. The
        /// accepted values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// </summary>
        [JsonProperty("auth_methods")]
        public string AuthMethods { get; set; }
        /// <summary>
        /// An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
        /// `RESTRICTED`. 
        ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
        ///   
        /// </summary>
        [JsonProperty("allowed_auth_methods")]
        public List<string> AllowedAuthMethods { get; set; }
        /// <summary>
        /// The setting that controls the MFA policy for all Members in the Organization. The accepted values are:
        ///  
        ///   `REQUIRED_FOR_ALL` – All Members within the Organization will be required to complete MFA every time
        /// they wish to log in. However, any active Session that existed prior to this setting change will remain
        /// valid. 
        ///  
        ///   `OPTIONAL` – The default value. The Organization does not require MFA by default for all Members.
        /// Members will be required to complete MFA only if their `mfa_enrolled` status is set to true.
        ///   
        /// </summary>
        [JsonProperty("mfa_policy")]
        public string MfaPolicy { get; set; }
        /// <summary>
        /// Implicit role assignments based off of email domains. 
        ///   For each domain-Role pair, all Members whose email addresses have the specified email domain will be
        /// granted the
        ///   associated Role, regardless of their login method. See the
        /// [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
        ///   for more information about role assignment.
        /// </summary>
        [JsonProperty("rbac_email_implicit_role_assignments")]
        public List<EmailImplicitRoleAssignment> RBACEmailImplicitRoleAssignments { get; set; }
        /// <summary>
        /// The setting that controls which MFA methods can be used by Members of an Organization. The accepted
        /// values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_mfa_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// </summary>
        [JsonProperty("mfa_methods")]
        public string MfaMethods { get; set; }
        /// <summary>
        /// An array of allowed MFA authentication methods. This list is enforced when `mfa_methods` is set to
        /// `RESTRICTED`.
        ///   The list's accepted values are: `sms_otp` and `totp`.
        ///   
        /// </summary>
        [JsonProperty("allowed_mfa_methods")]
        public List<string> AllowedMfaMethods { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can JIT provision into an organization by
        /// tenant. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with tenants in `allowed_oauth_tenants` can JIT provision via tenant.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning by OAuth Tenant.
        ///   
        /// </summary>
        [JsonProperty("oauth_tenant_jit_provisioning")]
        public string OAuthTenantJITProvisioning { get; set; }
        /// <summary>
        /// A map of allowed OAuth tenants. If this field is not passed in, the Organization will not allow JIT
        /// provisioning by OAuth Tenant. Allowed keys are "slack" and "hubspot".
        /// </summary>
        [JsonProperty("allowed_oauth_tenants")]
        public object AllowedOAuthTenants { get; set; }
        public B2BOrganizationsCreateRequest(string organizationName)
        {
            this.OrganizationName = organizationName;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Create"/>..
    /// </summary>
    public class B2BOrganizationsCreateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Delete"/>..
    /// </summary>
    public class B2BOrganizationsDeleteRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        public B2BOrganizationsDeleteRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Delete"/>..
    /// </summary>
    public class B2BOrganizationsDeleteResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Get"/>..
    /// </summary>
    public class B2BOrganizationsGetRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        public B2BOrganizationsGetRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Get"/>..
    /// </summary>
    public class B2BOrganizationsGetResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    public class B2BOrganizationsMetricsRequest
    {
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        public B2BOrganizationsMetricsRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    public class B2BOrganizationsMetricsResponse
    {
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        [JsonProperty("member_count")]
        public uint MemberCount { get; set; }
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Search"/>..
    /// </summary>
    public class B2BOrganizationsSearchRequest
    {
        /// <summary>
        /// The `cursor` field allows you to paginate through your results. Each result array is limited to 1000
        /// results. If your query returns more than 1000 results, you will need to paginate the responses using the
        /// `cursor`. If you receive a response that includes a non-null `next_cursor` in the `results_metadata`
        /// object, repeat the search call with the `next_cursor` value set to the `cursor` field to retrieve the
        /// next page of results. Continue to make search calls until the `next_cursor` in the response is null.
        /// </summary>
        [JsonProperty("cursor")]
        public string Cursor { get; set; }
        /// <summary>
        /// The number of search results to return per page. The default limit is 100. A maximum of 1000 results can
        /// be returned by a single search request. If the total size of your result set is greater than one page
        /// size, you must paginate the response. See the `cursor` field.
        /// </summary>
        [JsonProperty("limit")]
        public uint? Limit { get; set; }
        /// <summary>
        /// The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that will filter
        /// your results. Only an operator is required. If you include no operands, no filtering will be applied. If
        /// you include no query object, it will return all Organizations with no filtering applied.
        /// </summary>
        [JsonProperty("query")]
        public SearchQuery Query { get; set; }
        public B2BOrganizationsSearchRequest()
        {
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Search"/>..
    /// </summary>
    public class B2BOrganizationsSearchResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// An array of [Organization objects](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organizations")]
        public List<Organization> Organizations { get; set; }
        /// <summary>
        /// The search `results_metadata` object contains metadata relevant to your specific query like `total` and
        /// `next_cursor`.
        /// </summary>
        [JsonProperty("results_metadata")]
        public B2BOrganizationsResultsMetadata ResultsMetadata { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Update"/>..
    /// </summary>
    public class B2BOrganizationsUpdateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The name of the Organization. Must be between 1 and 128 characters in length.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.name` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("organization_name")]
        public string OrganizationName { get; set; }
        /// <summary>
        /// The unique URL slug of the Organization. The slug only accepts alphanumeric characters and the following
        /// reserved characters: `-` `.` `_` `~`. Must be between 2 and 128 characters in length.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.slug` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("organization_slug")]
        public string OrganizationSlug { get; set; }
        /// <summary>
        /// The image URL of the Organization logo.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.logo-url` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("organization_logo_url")]
        public string OrganizationLogoURL { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        ///           If a session header is passed into the request, this field may **not** be passed into the
        /// request. You cannot 
        ///           update trusted metadata when acting as a Member.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// The default connection used for SSO when there are multiple active connections.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.default-sso-connection` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("sso_default_connection_id")]
        public string SSODefaultConnectionId { get; set; }
        /// <summary>
        /// The authentication setting that controls the JIT provisioning of Members when authenticating via SSO.
        /// The accepted values are:
        ///  
        ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
        /// of the Organization's `sso_active_connections`.
        ///  
        ///   `RESTRICTED` – only new Members with SSO logins that comply with
        /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.sso-jit-provisioning` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("sso_jit_provisioning")]
        public string SSOJITProvisioning { get; set; }
        /// <summary>
        /// An array of `connection_id`s that reference
        /// [SAML Connection objects](https://stytch.com/docs/b2b/api/saml-connection-object). 
        ///   Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
        /// set to `RESTRICTED`.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.sso-jit-provisioning` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("sso_jit_provisioning_allowed_connections")]
        public List<string> SSOJITProvisioningAllowedConnections { get; set; }
        /// <summary>
        /// An array of email domains that allow invites or JIT provisioning for new Members. This list is enforced
        /// when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`. 
        ///     
        ///     
        ///     Common domains such as `gmail.com` are not allowed. See the
        /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-domains` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("email_allowed_domains")]
        public List<string> EmailAllowedDomains { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be provisioned by authenticating via Email
        /// Magic Link or OAuth. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// provisioned upon authentication via Email Magic Link or OAuth.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link and OAuth.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.email-jit-provisioning` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("email_jit_provisioning")]
        public string EmailJITProvisioning { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can be invited to an organization by email.
        /// The accepted values are: 
        ///  
        ///   `ALL_ALLOWED` – any new Member can be invited to join via email. 
        ///  
        ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
        /// invited via email.
        ///  
        ///   `NOT_ALLOWED` – disable email invites.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.email-invites` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("email_invites")]
        public string EmailInvites { get; set; }
        /// <summary>
        /// The setting that controls which authentication methods can be used by Members of an Organization. The
        /// accepted values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-auth-methods` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("auth_methods")]
        public string AuthMethods { get; set; }
        /// <summary>
        /// An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
        /// `RESTRICTED`. 
        ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-auth-methods` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("allowed_auth_methods")]
        public List<string> AllowedAuthMethods { get; set; }
        /// <summary>
        /// The setting that controls the MFA policy for all Members in the Organization. The accepted values are:
        ///  
        ///   `REQUIRED_FOR_ALL` – All Members within the Organization will be required to complete MFA every time
        /// they wish to log in. However, any active Session that existed prior to this setting change will remain
        /// valid. 
        ///  
        ///   `OPTIONAL` – The default value. The Organization does not require MFA by default for all Members.
        /// Members will be required to complete MFA only if their `mfa_enrolled` status is set to true.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.mfa-policy` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("mfa_policy")]
        public string MfaPolicy { get; set; }
        /// <summary>
        /// Implicit role assignments based off of email domains. 
        ///   For each domain-Role pair, all Members whose email addresses have the specified email domain will be
        /// granted the
        ///   associated Role, regardless of their login method. See the
        /// [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
        ///   for more information about role assignment.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.implicit-roles` action on the `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("rbac_email_implicit_role_assignments")]
        public List<EmailImplicitRoleAssignment> RBACEmailImplicitRoleAssignments { get; set; }
        /// <summary>
        /// The setting that controls which MFA methods can be used by Members of an Organization. The accepted
        /// values are:
        ///  
        ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
        ///  
        ///   `RESTRICTED` – only methods that comply with `allowed_mfa_methods` can be used for authentication.
        /// This setting does not apply to Members with `is_breakglass` set to `true`.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-mfa-methods` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("mfa_methods")]
        public string MfaMethods { get; set; }
        /// <summary>
        /// An array of allowed MFA authentication methods. This list is enforced when `mfa_methods` is set to
        /// `RESTRICTED`.
        ///   The list's accepted values are: `sms_otp` and `totp`.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-mfa-methods` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("allowed_mfa_methods")]
        public List<string> AllowedMfaMethods { get; set; }
        /// <summary>
        /// The authentication setting that controls how a new Member can JIT provision into an organization by
        /// tenant. The accepted values are: 
        ///  
        ///   `RESTRICTED` – only new Members with tenants in `allowed_oauth_tenants` can JIT provision via tenant.
        ///  
        ///   `NOT_ALLOWED` – disable JIT provisioning by OAuth Tenant.
        ///   
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.oauth-tenant-jit-provisioning` action on the
        /// `stytch.organization` Resource.
        /// </summary>
        [JsonProperty("oauth_tenant_jit_provisioning")]
        public string OAuthTenantJITProvisioning { get; set; }
        /// <summary>
        /// A map of allowed OAuth tenants. If this field is not passed in, the Organization will not allow JIT
        /// provisioning by OAuth Tenant. Allowed keys are "slack" and "hubspot".
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.allowed-oauth-tenants` action on the `stytch.organization`
        /// Resource.
        /// </summary>
        [JsonProperty("allowed_oauth_tenants")]
        public object AllowedOAuthTenants { get; set; }
        public B2BOrganizationsUpdateRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Update"/>..
    /// </summary>
    public class B2BOrganizationsUpdateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum SearchQueryOperator
    {
        [EnumMember(Value = "OR")]
        OR,
        [EnumMember(Value = "AND")]
        AND,
    }
    // MANUAL(SearchQueryOperand)(TYPES)
    public abstract class SearchQueryOperand
    {
        public abstract string FilterName { get; }
    }
    // ENDMANUAL(SearchQueryOperand)

}