// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OrganizationsEntry = System.Collections.Generic.Dictionary<string, Stytch.net.Models.Organization>;

namespace Stytch.net.Models
{

    public class B2BOrganizationsMembersCreateRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersDeleteMFAPhoneNumberRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersDeletePasswordRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersDeleteRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersDeleteTOTPRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersGetConnectedAppsRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersReactivateRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersSearchRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersStartEmailUpdateRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersUnlinkRetiredEmailRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    public class B2BOrganizationsMembersUpdateRequestOptions
    {
        /// <summary>
        /// Optional authorization object.
        /// Pass in an active Stytch Member session token or session JWT and the request
        /// will be run using that member's permissions.
        /// </summary>
        [JsonProperty("authorization")]
        public Authorization Authorization { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Create"/>..
    /// </summary>
    public class B2BOrganizationsMembersCreateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        /// <summary>
        /// The name of the Member.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// An arbitrary JSON object of application-specific data. These fields can be edited directly by the
        ///   frontend SDK, and should not be used to store critical information. See the
        /// [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
        ///   for complete field behavior details.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
        /// <summary>
        /// Flag for whether or not to save a Member as `pending` or `active` in Stytch. It defaults to false. If
        /// true, new Members will be created with status `pending` in Stytch's backend. Their status will remain
        /// `pending` and they will continue to receive signup email templates for every Email Magic Link until that
        /// Member authenticates and becomes `active`. If false, new Members will be created with status `active`.
        /// </summary>
        [JsonProperty("create_member_as_pending")]
        public bool? CreateMemberAsPending { get; set; }
        /// <summary>
        /// Identifies the Member as a break glass user - someone who has permissions to authenticate into an
        /// Organization by bypassing the Organization's settings. A break glass account is typically used for
        /// emergency purposes to gain access outside of normal authentication procedures. Refer to the
        /// [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
        /// more details.
        /// </summary>
        [JsonProperty("is_breakglass")]
        public bool? IsBreakglass { get; set; }
        /// <summary>
        /// The Member's phone number. A Member may only have one phone number. The phone number should be in E.164
        /// format (i.e. +1XXXXXXXXXX).
        /// </summary>
        [JsonProperty("mfa_phone_number")]
        public string MfaPhoneNumber { get; set; }
        /// <summary>
        /// Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
        /// wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
        /// Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
        /// </summary>
        [JsonProperty("mfa_enrolled")]
        public bool? MfaEnrolled { get; set; }
        /// <summary>
        /// Roles to explicitly assign to this Member. See the
        /// [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
        ///    for more information about role assignment.
        /// </summary>
        [JsonProperty("roles")]
        public List<string> Roles { get; set; }
        /// <summary>
        /// An identifier that can be used in API calls wherever a member_id is expected. This is a string
        /// consisting of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
        /// External IDs must be unique within an organization, but may be reused across different organizations in
        /// the same project.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
        public B2BOrganizationsMembersCreateRequest(string organizationId, string emailAddress)
        {
            this.OrganizationId = organizationId;
            this.EmailAddress = emailAddress;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Create"/>..
    /// </summary>
    public class B2BOrganizationsMembersCreateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DangerouslyGet"/>..
    /// </summary>
    public class B2BOrganizationsMembersDangerouslyGetRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// Whether to include deleted Members in the response. Defaults to false.
        /// </summary>
        [JsonProperty("include_deleted")]
        public bool? IncludeDeleted { get; set; }
        public B2BOrganizationsMembersDangerouslyGetRequest(string memberId)
        {
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeleteMFAPhoneNumber"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteMFAPhoneNumberRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        public B2BOrganizationsMembersDeleteMFAPhoneNumberRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeleteMFAPhoneNumber"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteMFAPhoneNumberResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeletePassword"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeletePasswordRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a Member's password.
        /// </summary>
        [JsonProperty("member_password_id")]
        public string MemberPasswordId { get; set; }
        public B2BOrganizationsMembersDeletePasswordRequest(string organizationId, string memberPasswordId)
        {
            this.OrganizationId = organizationId;
            this.MemberPasswordId = memberPasswordId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeletePassword"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeletePasswordResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Delete"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        public B2BOrganizationsMembersDeleteRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Delete"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeleteTOTP"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteTOTPRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        public B2BOrganizationsMembersDeleteTOTPRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DeleteTOTP"/>..
    /// </summary>
    public class B2BOrganizationsMembersDeleteTOTPResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.GetConnectedApps"/>..
    /// </summary>
    public class B2BOrganizationsMembersGetConnectedAppsRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        public B2BOrganizationsMembersGetConnectedAppsRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.GetConnectedApps"/>..
    /// </summary>
    public class B2BOrganizationsMembersGetConnectedAppsResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// An array of Connected Apps with which the Member has successfully completed an authorization flow.
        /// </summary>
        [JsonProperty("connected_apps")]
        public List<MemberConnectedApp> ConnectedApps { get; set; }
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Get"/>..
    /// </summary>
    public class B2BOrganizationsMembersGetRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        public B2BOrganizationsMembersGetRequest(string organizationId)
        {
            this.OrganizationId = organizationId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.DangerouslyGet"/>., <see
    /// cref="Stytch.net.Clients.B2B.Organizations.Members.Get"/>..
    /// </summary>
    public class B2BOrganizationsMembersGetResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.OIDCProviders"/>..
    /// </summary>
    public class B2BOrganizationsMembersOIDCProviderInformationRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// Whether to return the refresh token Stytch has stored for the OAuth Provider. Defaults to false.
        /// **Important:** If your application exchanges the refresh token, Stytch may not be able to automatically
        /// refresh access tokens in the future.
        /// </summary>
        [JsonProperty("include_refresh_token")]
        public bool? IncludeRefreshToken { get; set; }
        public B2BOrganizationsMembersOIDCProviderInformationRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.OIDCProviders"/>..
    /// </summary>
    public class B2BOrganizationsMembersOIDCProvidersResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// A list of tokens the member is registered with.
        /// </summary>
        [JsonProperty("registrations")]
        public List<OIDCProviderInfo> Registrations { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Reactivate"/>..
    /// </summary>
    public class B2BOrganizationsMembersReactivateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        public B2BOrganizationsMembersReactivateRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Reactivate"/>..
    /// </summary>
    public class B2BOrganizationsMembersReactivateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Search"/>..
    /// </summary>
    public class B2BOrganizationsMembersSearchRequest
    {
        /// <summary>
        /// An array of organization_ids. At least one value is required.
        /// </summary>
        [JsonProperty("organization_ids")]
        public List<string> OrganizationIds { get; set; }
        /// <summary>
        /// The `cursor` field allows you to paginate through your results. Each result array is limited to 1000
        /// results. If your query returns more than 1000 results, you will need to paginate the responses using the
        /// `cursor`. If you receive a response that includes a non-null `next_cursor` in the `results_metadata`
        /// object, repeat the search call with the `next_cursor` value set to the `cursor` field to retrieve the
        /// next page of results. Continue to make search calls until the `next_cursor` in the response is null.
        /// </summary>
        [JsonProperty("cursor")]
        public string Cursor { get; set; }
        /// <summary>
        /// The number of search results to return per page. The default limit is 100. A maximum of 1000 results can
        /// be returned by a single search request. If the total size of your result set is greater than one page
        /// size, you must paginate the response. See the `cursor` field.
        /// </summary>
        [JsonProperty("limit")]
        public uint? Limit { get; set; }
        /// <summary>
        /// The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that will filter
        /// your results. Only an operator is required. If you include no operands, no filtering will be applied. If
        /// you include no query object, it will return all Members with no filtering applied.
        /// </summary>
        [JsonProperty("query")]
        public SearchQuery Query { get; set; }
        public B2BOrganizationsMembersSearchRequest(List<string> organizationIds)
        {
            this.OrganizationIds = organizationIds;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Search"/>..
    /// </summary>
    public class B2BOrganizationsMembersSearchResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// An array of [Member objects](member-object).
        /// </summary>
        [JsonProperty("members")]
        public List<Member> Members { get; set; }
        /// <summary>
        /// The search `results_metadata` object contains metadata relevant to your specific query like `total` and
        /// `next_cursor`.
        /// </summary>
        [JsonProperty("results_metadata")]
        public B2BOrganizationsResultsMetadata ResultsMetadata { get; set; }
        /// <summary>
        /// A map from `organization_id` to
        /// [Organization object](https://stytch.com/docs/b2b/api/organization-object). The map only contains the
        /// Organizations that the Members belongs to.
        /// </summary>
        [JsonProperty("organizations")]
        public OrganizationsEntry Organizations { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.StartEmailUpdate"/>..
    /// </summary>
    public class B2BOrganizationsMembersStartEmailUpdateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The new email address for the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        /// <summary>
        /// The URL that the Member clicks from the login Email Magic Link. This URL should be an endpoint in the
        /// backend server that
        ///   verifies the request by querying Stytch's authenticate endpoint and finishes the login. If this value
        /// is not passed, the default login
        ///   redirect URL that you set in your Dashboard is used. If you have not set a default login redirect URL,
        /// an error is returned.
        /// </summary>
        [JsonProperty("login_redirect_url")]
        public string LoginRedirectURL { get; set; }
        /// <summary>
        /// Used to determine which language to use when sending the user this delivery method. Parameter is a
        /// [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/), e.g. `"en"`.
        /// 
        /// Currently supported languages are English (`"en"`), Spanish (`"es"`), French (`"fr"`) and Brazilian
        /// Portuguese (`"pt-br"`); if no value is provided, the copy defaults to English.
        /// 
        /// Request support for additional languages
        /// [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
        /// 
        /// </summary>
        [JsonProperty("locale")]
        public StartEmailUpdateRequestLocale? Locale { get; set; }
        /// <summary>
        /// Use a custom template for login emails. By default, it will use your default email template. The
        /// template must be from Stytch's
        /// built-in customizations or a custom HTML email for Magic Links - Login.
        /// </summary>
        [JsonProperty("login_template_id")]
        public string LoginTemplateId { get; set; }
        public B2BOrganizationsMembersStartEmailUpdateRequest(string organizationId, string memberId, string emailAddress)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
            this.EmailAddress = emailAddress;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.StartEmailUpdate"/>..
    /// </summary>
    public class B2BOrganizationsMembersStartEmailUpdateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.UnlinkRetiredEmail"/>..
    /// </summary>
    public class B2BOrganizationsMembersUnlinkRetiredEmailRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The globally unique UUID of a Member's email.
        /// </summary>
        [JsonProperty("email_id")]
        public string EmailId { get; set; }
        /// <summary>
        /// The email address of the Member.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        public B2BOrganizationsMembersUnlinkRetiredEmailRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.UnlinkRetiredEmail"/>..
    /// </summary>
    public class B2BOrganizationsMembersUnlinkRetiredEmailResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }
    /// <summary>
    /// Request type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Update"/>..
    /// </summary>
    public class B2BOrganizationsMembersUpdateRequest
    {
        /// <summary>
        /// Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
        /// perform operations on an Organization, so be sure to preserve this value. You may also use the
        /// organization_slug or organization_external_id here as a convenience.
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
        /// operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
        /// for the member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The name of the Member.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.name` action on the `stytch.member` Resource. Alternatively, if
        /// the Member Session matches the Member associated with the `member_id` passed in the request, the
        /// authorization check will also allow a Member Session that has permission to perform the
        /// `update.info.name` action on the `stytch.self` Resource.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
        ///           If a session header is passed into the request, this field may **not** be passed into the
        /// request. You cannot
        ///           update trusted metadata when acting as a Member.
        /// </summary>
        [JsonProperty("trusted_metadata")]
        public object TrustedMetadata { get; set; }
        /// <summary>
        /// An arbitrary JSON object of application-specific data. These fields can be edited directly by the
        ///   frontend SDK, and should not be used to store critical information. See the
        /// [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
        ///   for complete field behavior details.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.untrusted-metadata` action on the `stytch.member` Resource.
        /// Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
        /// request, the authorization check will also allow a Member Session that has permission to perform the
        /// `update.info.untrusted-metadata` action on the `stytch.self` Resource.
        /// </summary>
        [JsonProperty("untrusted_metadata")]
        public object UntrustedMetadata { get; set; }
        /// <summary>
        /// Identifies the Member as a break glass user - someone who has permissions to authenticate into an
        /// Organization by bypassing the Organization's settings. A break glass account is typically used for
        /// emergency purposes to gain access outside of normal authentication procedures. Refer to the
        /// [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
        /// more details.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.is-breakglass` action on the `stytch.member` Resource.
        /// </summary>
        [JsonProperty("is_breakglass")]
        public bool? IsBreakglass { get; set; }
        /// <summary>
        /// Sets the Member's phone number. Throws an error if the Member already has a phone number. To change the
        /// Member's phone number, use the
        /// [Delete member phone number endpoint](https://stytch.com/docs/b2b/api/delete-member-mfa-phone-number) to
        /// delete the Member's existing phone number first.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.mfa-phone` action on the `stytch.member` Resource. Alternatively,
        /// if the Member Session matches the Member associated with the `member_id` passed in the request, the
        /// authorization check will also allow a Member Session that has permission to perform the
        /// `update.info.mfa-phone` action on the `stytch.self` Resource.
        /// </summary>
        [JsonProperty("mfa_phone_number")]
        public string MfaPhoneNumber { get; set; }
        /// <summary>
        /// Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
        /// wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
        /// Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.mfa-enrolled` action on the `stytch.member` Resource.
        /// Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
        /// request, the authorization check will also allow a Member Session that has permission to perform the
        /// `update.settings.mfa-enrolled` action on the `stytch.self` Resource.
        /// </summary>
        [JsonProperty("mfa_enrolled")]
        public bool? MfaEnrolled { get; set; }
        /// <summary>
        /// Roles to explicitly assign to this Member.
        ///  Will completely replace any existing explicitly assigned roles. See the
        ///  [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information about role
        /// assignment.
        /// 
        ///    If a Role is removed from a Member, and the Member is also implicitly assigned this Role from an SSO
        /// connection
        ///    or an SSO group, we will by default revoke any existing sessions for the Member that contain any SSO
        ///    authentication factors with the affected connection ID. You can preserve these sessions by passing in
        /// the
        ///    `preserve_existing_sessions` parameter with a value of `true`.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.roles` action on the `stytch.member` Resource.
        /// </summary>
        [JsonProperty("roles")]
        public List<string> Roles { get; set; }
        /// <summary>
        /// Whether to preserve existing sessions when explicit Roles that are revoked are also implicitly assigned
        ///   by SSO connection or SSO group. Defaults to `false` - that is, existing Member Sessions that contain
        /// SSO
        ///   authentication factors with the affected SSO connection IDs will be revoked.
        /// </summary>
        [JsonProperty("preserve_existing_sessions")]
        public bool? PreserveExistingSessions { get; set; }
        /// <summary>
        /// The Member's default MFA method. This value is used to determine which secondary MFA method to use in
        /// the case of multiple methods registered for a Member. The current possible values are `sms_otp` and
        /// `totp`.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.settings.default-mfa-method` action on the `stytch.member` Resource.
        /// Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
        /// request, the authorization check will also allow a Member Session that has permission to perform the
        /// `update.settings.default-mfa-method` action on the `stytch.self` Resource.
        /// </summary>
        [JsonProperty("default_mfa_method")]
        public string DefaultMfaMethod { get; set; }
        /// <summary>
        /// Updates the Member's `email_address`, if provided. This will clear any existing passwords and require
        /// re-verification of the new email address.
        ///         If a Member's email address is changed, other Members in the same Organization cannot use the
        /// old email address, although the Member may update back to their old email address.
        ///         A Member's email address can only be useable again by other Members if the Member is deleted.
        /// 
        /// If this field is provided and a session header is passed into the request, the Member Session must have
        /// permission to perform the `update.info.email` action on the `stytch.member` Resource. Members cannot
        /// update their own email address.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; }
        /// <summary>
        /// An identifier that can be used in API calls wherever a member_id is expected. This is a string
        /// consisting of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
        /// External IDs must be unique within an organization, but may be reused across different organizations in
        /// the same project.
        /// </summary>
        [JsonProperty("external_id")]
        public string ExternalId { get; set; }
        /// <summary>
        /// If `unlink_email` is `true` and an `email_address` is provided, the Member's previous email will be
        /// deleted instead of retired. Defaults to `false`.
        /// </summary>
        [JsonProperty("unlink_email")]
        public bool? UnlinkEmail { get; set; }
        public B2BOrganizationsMembersUpdateRequest(string organizationId, string memberId)
        {
            this.OrganizationId = organizationId;
            this.MemberId = memberId;
        }
    }
    /// <summary>
    /// Response type for <see cref="Stytch.net.Clients.B2B.Organizations.Members.Update"/>..
    /// </summary>
    public class B2BOrganizationsMembersUpdateResponse
    {
        /// <summary>
        /// Globally unique UUID that is returned with every API call. This value is important to log for debugging
        /// purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
        /// </summary>
        [JsonProperty("request_id")]
        public string RequestId { get; set; }
        /// <summary>
        /// Globally unique UUID that identifies a specific Member.
        /// </summary>
        [JsonProperty("member_id")]
        public string MemberId { get; set; }
        /// <summary>
        /// The [Member object](https://stytch.com/docs/b2b/api/member-object)
        /// </summary>
        [JsonProperty("member")]
        public Member Member { get; set; }
        /// <summary>
        /// The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
        /// </summary>
        [JsonProperty("organization")]
        public Organization Organization { get; set; }
        /// <summary>
        /// The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
        /// 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
        /// </summary>
        [JsonProperty("status_code")]
        public int StatusCode { get; set; }
    }

    [JsonConverter(typeof(StringEnumConverter))]
    public enum StartEmailUpdateRequestLocale
    {
        [EnumMember(Value = "en")]
        EN,
        [EnumMember(Value = "es")]
        ES,
        [EnumMember(Value = "pt-br")]
        PTBR,
        [EnumMember(Value = "fr")]
        FR,
    }
}
