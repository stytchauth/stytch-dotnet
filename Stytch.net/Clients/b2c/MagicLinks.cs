// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.b2c
{
  public class MagicLinks
  {
    private readonly HttpClient _httpClient;
    public readonly MagicLinksEmail Email;
    public MagicLinks(HttpClient client)
    {
      _httpClient = client;
        Email = new MagicLinksEmail(_httpClient);
    }







    /**
    * Authenticate a User given a Magic Link. This endpoint verifies that the Magic Link token is valid,
    * hasn't expired or been previously used, and any optional security settings such as IP match or user
    * agent match are satisfied.
    * @param data {@link MagicLinksAuthenticateRequest}
    * @returns {@link MagicLinksAuthenticateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<MagicLinksAuthenticateResponse> Authenticate(
        MagicLinksAuthenticateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/magic_links/authenticate", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<MagicLinksAuthenticateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Create an embeddable Magic Link token for a User. Access to this endpoint is restricted. To enable it,
    * please send us a note at support@stytch.com.
    * 
    * ### Next steps
    * Send the returned `token` value to the end user in a link which directs to your application. When the
    * end user follows your link, collect the token, and call
    * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete
    * authentication.
    * @param data {@link MagicLinksCreateRequest}
    * @returns {@link MagicLinksCreateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<MagicLinksCreateResponse> Create(
        MagicLinksCreateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/magic_links", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<MagicLinksCreateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }

  }

}

