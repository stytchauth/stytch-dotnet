// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.b2c
{
  public class M2MClientsSecrets
  {
    private readonly HttpClient _httpClient;
    public M2MClientsSecrets(HttpClient client)
    {
      _httpClient = client;
    }







    /**
    * Initiate the rotation of an M2M client secret. After this endpoint is called, both the client's
    * `client_secret` and `next_client_secret` will be valid. To complete the secret rotation flow, update all
    * usages of `client_secret` to `next_client_secret` and call the
    * [Rotate Secret Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret)[Rotate Secret Endpoint](https://stytch.com/docs/api/m2m-rotate-secret) to complete the flow.
    * Secret rotation can be cancelled using the
    * [Rotate Cancel Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-cancel)[Rotate Cancel Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-cancel).
    * 
    * **Important:** This is the only time you will be able to view the generated `next_client_secret` in the
    * API response. Stytch stores a hash of the `next_client_secret` and cannot recover the value if lost. Be
    * sure to persist the `next_client_secret` in a secure location. If the `next_client_secret` is lost, you
    * will need to trigger a secret rotation flow to receive another one.
    * @param data {@link M2MClientsSecretsRotateStartRequest}
    * @returns {@link M2MClientsSecretsRotateStartResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<M2MClientsSecretsRotateStartResponse> RotateStart(
        M2MClientsSecretsRotateStartRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/m2m/clients/${data.client_id}/secrets/rotate/start", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<M2MClientsSecretsRotateStartResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Cancel the rotation of an M2M client secret started with the
    * [Start Secret Rotation Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-start)
    * [Start Secret Rotation Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-start).
    * After this endpoint is called, the client's `next_client_secret` is discarded and only the original
    * `client_secret` will be valid.
    * @param data {@link M2MClientsSecretsRotateCancelRequest}
    * @returns {@link M2MClientsSecretsRotateCancelResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<M2MClientsSecretsRotateCancelResponse> RotateCancel(
        M2MClientsSecretsRotateCancelRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/m2m/clients/${data.client_id}/secrets/rotate/cancel", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<M2MClientsSecretsRotateCancelResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Complete the rotation of an M2M client secret started with the
    * [Start Secret Rotation Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-start)
    * [Start Secret Rotation Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-start).
    * After this endpoint is called, the client's `next_client_secret` becomes its `client_secret` and the
    * previous `client_secret` will no longer be valid.
    * @param data {@link M2MClientsSecretsRotateRequest}
    * @returns {@link M2MClientsSecretsRotateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<M2MClientsSecretsRotateResponse> Rotate(
        M2MClientsSecretsRotateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/m2m/clients/${data.client_id}/secrets/rotate", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<M2MClientsSecretsRotateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }

  }

}

