// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.b2c
{
  public class WebAuthn
  {
    private readonly HttpClient _httpClient;
    public WebAuthn(HttpClient client)
    {
      _httpClient = client;
    }







    /**
    * Initiate the process of creating a new Passkey or WebAuthn registration. 
    * 
    * To optimize for Passkeys, set the `return_passkey_credential_options` field to `true`.
    * 
    * After calling this endpoint, the browser will need to call
    * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) with the data
    * from
    * [public_key_credential_creation_options](https://w3c.github.io/webauthn/#dictionary-makecredentialoptions)
    * passed to the [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential)
    * request via the public key argument. We recommend using the `create()` wrapper provided by the
    * webauthn-json library. 
    * 
    * If you are not using the [webauthn-json](https://github.com/github/webauthn-json) library, the
    * `public_key_credential_creation_options` will need to be converted to a suitable public key by
    * unmarshalling the JSON, base64 decoding the user ID field, and converting user ID and the challenge
    * fields into an array buffer.
    * @param data {@link WebAuthnRegisterStartRequest}
    * @returns {@link WebAuthnRegisterStartResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<WebAuthnRegisterStartResponse> registerStart(
        WebAuthnRegisterStartRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/webauthn/register/start", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<WebAuthnRegisterStartResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Complete the creation of a WebAuthn registration by passing the response from the
    * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) request to
    * this endpoint as the `public_key_credential` parameter. 
    * 
    * If the [webauthn-json](https://github.com/github/webauthn-json) library's `create()` method was used,
    * the response can be passed directly to the
    * [register endpoint](https://stytch.com/docs/api/webauthn-register). If not, some fields (the client data
    * and the attestation object) from the
    * [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential) response will
    * need to be converted from array buffers to strings and marshalled into JSON.
    * @param data {@link WebAuthnRegisterRequest}
    * @returns {@link WebAuthnRegisterResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<WebAuthnRegisterResponse> register(
        WebAuthnRegisterRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/webauthn/register", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<WebAuthnRegisterResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Initiate the authentication of a Passkey or WebAuthn registration. 
    * 
    * To optimize for Passkeys, set the `return_passkey_credential_options` field to `true`.
    * 
    * After calling this endpoint, the browser will need to call
    * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) with the data from
    * `public_key_credential_request_options` passed to the
    * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) request via the
    * public key argument. We recommend using the `get()` wrapper provided by the webauthn-json library. 
    * 
    * If you are not using the [webauthn-json](https://github.com/github/webauthn-json) library, `the
    * public_key_credential_request_options` will need to be converted to a suitable public key by
    * unmarshalling the JSON and converting some the fields to array buffers.
    * @param data {@link WebAuthnAuthenticateStartRequest}
    * @returns {@link WebAuthnAuthenticateStartResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<WebAuthnAuthenticateStartResponse> authenticateStart(
        WebAuthnAuthenticateStartRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/webauthn/authenticate/start", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<WebAuthnAuthenticateStartResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Complete the authentication of a Passkey or WebAuthn registration by passing the response from the
    * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) request to the
    * authenticate endpoint. 
    * 
    * If the [webauthn-json](https://github.com/github/webauthn-json) library's `get()` method was used, the
    * response can be passed directly to the
    * [authenticate endpoint](https://stytch.com/docs/api/webauthn-authenticate). If not some fields from the
    * [navigator.credentials.get()](https://www.w3.org/TR/webauthn-2/#sctn-getAssertion) response will need to
    * be converted from array buffers to strings and marshalled into JSON.
    * @param data {@link WebAuthnAuthenticateRequest}
    * @returns {@link WebAuthnAuthenticateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<WebAuthnAuthenticateResponse> authenticate(
        WebAuthnAuthenticateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/webauthn/authenticate", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<WebAuthnAuthenticateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Updates a Passkey or WebAuthn registration.
    * @param data {@link WebAuthnUpdateRequest}
    * @returns {@link WebAuthnUpdateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<WebAuthnUpdateResponse> update(
        WebAuthnUpdateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/webauthn/${data.webauthn_registration_id}", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<WebAuthnUpdateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }

  }

}

