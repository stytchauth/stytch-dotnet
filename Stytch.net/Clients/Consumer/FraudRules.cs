// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.Consumer
{
    public class FraudRules
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public FraudRules(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Set a rule for a particular `visitor_id`, `browser_id`, `visitor_fingerprint`, `browser_fingerprint`,
        /// `hardware_fingerprint`, `network_fingerprint`, `cidr_block`, `asn`, or `country_code`. This is helpful
        /// in cases where you want to allow or block a specific user or fingerprint. You should be careful when
        /// setting rules for `browser_fingerprint`, `hardware_fingerprint`, or `network_fingerprint` as they can be
        /// shared across multiple users, and you could affect more users than intended.
        /// 
        /// You may not set an `ALLOW` rule for a `country_code`.
        /// 
        /// Rules are applied in the order specified above. For example, if an end user has an `ALLOW` rule set for
        /// their `visitor_id` but a `BLOCK` rule set for their `hardware_fingerprint`, they will receive an `ALLOW`
        /// verdict because the `visitor_id` rule takes precedence.
        /// 
        /// If there are conflicts between multiple `cidr_block` rules (for example, if the `ip_address` of the end
        /// user overlaps with multiple CIDR blocks that have rules set), the conflicts are resolved as follows:
        /// - The smallest block size takes precedence. For example, if an `ip_address` overlaps with a `cidr_block`
        /// rule of `ALLOW` for a block with a prefix of `/32` and a `cidr_block` rule of `BLOCK` with a prefix of
        /// `/24`, the rule match verdict will be `ALLOW`.
        /// - Among equivalent size blocks, `BLOCK` takes precedence over `CHALLENGE`, which takes precedence over
        /// `ALLOW`. For example, if an `ip_address` overlaps with two `cidr_block` rules with blocks of the same
        /// size that return `CHALLENGE` and `ALLOW`, the rule match verdict will be `CHALLENGE`.
        /// </summary>
        public async Task<FraudRulesSetResponse> Set(
            FraudRulesSetRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/rules/set"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<FraudRulesSetResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Get all rules that have been set for your project.
        /// </summary>
        public async Task<FraudRulesListResponse> List(
            FraudRulesListRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/rules/list"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<FraudRulesListResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
