// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.B2B
{
    public class OAuthDiscovery
    {
        private readonly HttpClient _httpClient;
        public OAuthDiscovery(HttpClient client)
        {
            _httpClient = client;
        }

        /// <summary>
        /// Authenticates the Discovery OAuth token and exchanges it for an Intermediate Session Token. Intermediate
        /// Session Tokens can be used for various Discovery login flows and are valid for 10 minutes.
        /// </summary>
        public async Task<B2BOAuthDiscoveryAuthenticateResponse> Authenticate(
            B2BOAuthDiscoveryAuthenticateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/b2b/oauth/discovery/authenticate");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BOAuthDiscoveryAuthenticateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }

    }

}

