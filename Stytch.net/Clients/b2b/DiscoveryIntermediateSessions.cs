// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.B2B
{
    public class DiscoveryIntermediateSessions
    {
        private readonly HttpClient _httpClient;
        public DiscoveryIntermediateSessions(HttpClient client)
        {
            _httpClient = client;
        }







        /// <summary>
        /// Exchange an Intermediate Session for a fully realized
        /// [Member Session](https://stytch.com/docs/b2b/api/session-object) in a desired
        /// [Organization](https://stytch.com/docs/b2b/api/organization-object).
        /// This operation consumes the Intermediate Session.
        /// 
        /// This endpoint can be used to accept invites and create new members via domain matching.
        /// 
        /// If the Member is required to complete MFA to log in to the Organization, the returned value of
        /// `member_authenticated` will be `false`.
        /// The `intermediate_session_token` will not be consumed and instead will be returned in the response.
        /// The `intermediate_session_token` can be passed into the
        /// [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the
        /// MFA step and acquire a full member session.
        /// The `intermediate_session_token` can also be used with the
        /// [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
        /// or the
        /// [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
        /// The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
        /// </summary>
        public async Task<B2BDiscoveryIntermediateSessionsExchangeResponse> Exchange(
            B2BDiscoveryIntermediateSessionsExchangeRequest request)
        {
            // Serialize the request model to JSON
            var jsonBody = JsonConvert.SerializeObject(request);

            // Create the content with the right content type
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

            // Send the POST request to the specified URL
            var response = await _httpClient.PostAsync("/v1/b2b/discovery/intermediate_sessions/exchange", content);

            // Read the response body (even if the response is not successful)
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // If the response is successful, deserialize and return the response
                return JsonConvert.DeserializeObject<B2BDiscoveryIntermediateSessionsExchangeResponse>(responseBody);
            }
            else
            {
                // If the response is not successful, log the error details
                Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }

    }

}

