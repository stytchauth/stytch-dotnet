// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.b2b
{
  public class SSOSAML
  {
    private readonly HttpClient _httpClient;
    public SSOSAML(HttpClient client)
    {
      _httpClient = client;
    }







    /**
    * Create a new SAML Connection.
    * @param data {@link B2BSSOSAMLCreateConnectionRequest}
    * @param options {@link B2BSSOSAMLCreateConnectionRequestOptions}
    * @returns {@link B2BSSOSAMLCreateConnectionResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<B2BSSOSAMLCreateConnectionResponse> createConnection(
        B2BSSOSAMLCreateConnectionRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/b2b/sso/saml/${data.organization_id}", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<B2BSSOSAMLCreateConnectionResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Updates an existing SAML connection.
    * 
    * Note that a newly created connection will not become active until all of the following are provided:
    * * `idp_sso_url`
    * * `attribute_mapping`
    * * `idp_entity_id`
    * * `x509_certificate`
    * @param data {@link B2BSSOSAMLUpdateConnectionRequest}
    * @param options {@link B2BSSOSAMLUpdateConnectionRequestOptions}
    * @returns {@link B2BSSOSAMLUpdateConnectionResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<B2BSSOSAMLUpdateConnectionResponse> updateConnection(
        B2BSSOSAMLUpdateConnectionRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<B2BSSOSAMLUpdateConnectionResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Used to update an existing SAML connection using an IDP metadata URL.
    * 
    * A newly created connection will not become active until all the following are provided:
    * * `idp_sso_url`
    * * `idp_entity_id`
    * * `x509_certificate`
    * * `attribute_mapping` (must be supplied using [Update SAML Connection](update-saml-connection))
    * @param data {@link B2BSSOSAMLUpdateByURLRequest}
    * @param options {@link B2BSSOSAMLUpdateByURLRequestOptions}
    * @returns {@link B2BSSOSAMLUpdateByURLResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<B2BSSOSAMLUpdateByURLResponse> updateByURL(
        B2BSSOSAMLUpdateByURLRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}/url", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<B2BSSOSAMLUpdateByURLResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }
    /**
    * Delete a SAML verification certificate.
    * 
    * You may need to do this when rotating certificates from your IdP, since Stytch allows a maximum of 5
    * certificates per connection. There must always be at least one certificate per active connection.
    * @param data {@link B2BSSOSAMLDeleteVerificationCertificateRequest}
    * @param options {@link B2BSSOSAMLDeleteVerificationCertificateRequestOptions}
    * @returns {@link B2BSSOSAMLDeleteVerificationCertificateResponse}
    * @async
    * @throws A {@link StytchError} on a non-2xx response from the Stytch API
    * @throws A {@link RequestError} when the Stytch API cannot be reached
    */
    public async Task<B2BSSOSAMLDeleteVerificationCertificateResponse> deleteVerificationCertificate(
        B2BSSOSAMLDeleteVerificationCertificateRequest request)
    {
        // Serialize the request model to JSON
        var jsonBody = JsonConvert.SerializeObject(request);

        // Create the content with the right content type
        var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Send the POST request to the specified URL
        var response = await _httpClient.PostAsync("/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}/verification_certificates/${data.certificate_id}", content);

        // Read the response body (even if the response is not successful)
        var responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // If the response is successful, deserialize and return the response
            return JsonConvert.DeserializeObject<B2BSSOSAMLDeleteVerificationCertificateResponse>(responseBody);
        }
        else
        {
            // If the response is not successful, log the error details
            Console.WriteLine($"Error: {response.StatusCode}, Response Body: {responseBody}");

            // Optionally, throw an exception or return null or an error object
            throw new HttpRequestException(
                $"Request failed with status code {response.StatusCode}: {responseBody}");
        }
    }

  }

}

