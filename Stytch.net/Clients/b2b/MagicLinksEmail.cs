// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.B2B
{
    public class MagicLinksEmail
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public readonly MagicLinksEmailDiscovery Discovery;
        public MagicLinksEmail(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
            Discovery = new MagicLinksEmailDiscovery(_httpClient, _config);
        }

        /// <summary>
        /// Send either a login or signup magic link to a Member. A new, pending, or invited Member will receive a
        /// signup Email Magic Link. Members will have a `pending` status until they successfully authenticate. An
        /// active Member will receive a login Email Magic Link.
        /// 
        /// The magic link is valid for 60 minutes.
        /// </summary>
        public async Task<B2BMagicLinksEmailLoginOrSignupResponse> LoginOrSignup(
            B2BMagicLinksEmailLoginOrSignupRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/b2b/magic_links/email/login_or_signup"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BMagicLinksEmailLoginOrSignupResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Send an invite email to a new Member to join an Organization. The Member will be created with an
        /// `invited` status until they successfully authenticate. Sending invites to `pending` Members will update
        /// their status to `invited`. Sending invites to already `active` Members will return an error.
        /// 
        /// The magic link invite will be valid for 1 week.
        /// 
        /// ## Revoke an invite
        /// 
        /// To revoke an existing invite, use the [Delete Member](https://stytch.com/docs/b2b/api/delete-member)
        /// endpoint. This will both delete the invited Member from the target Organization and revoke all existing
        /// invite emails.
        /// </summary>
        public async Task<B2BMagicLinksEmailInviteResponse> Invite(
            B2BMagicLinksEmailInviteRequest request
            , B2BMagicLinksEmailInviteRequestOptions options
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/b2b/magic_links/email/invite"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;
            if (!string.IsNullOrEmpty(options.Authorization.SessionToken))
            {
                httpReq.Headers.Add("X-Stytch-Member-Session", options.Authorization.SessionToken);
            }
            if (!string.IsNullOrEmpty(options.Authorization.SessionJwt))
            {
                httpReq.Headers.Add("X-Stytch-Member-SessionJWT", options.Authorization.SessionJwt);
            }

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BMagicLinksEmailInviteResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
