// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.B2B
{
    public class OAuth
    {
        private readonly HttpClient _httpClient;
        public readonly OAuthDiscovery Discovery;
        public OAuth(HttpClient client)
        {
            _httpClient = client;
            Discovery = new OAuthDiscovery(_httpClient);
        }

        /// <summary>
        /// Authenticate a Member given a `token`. This endpoint verifies that the member completed the OAuth flow
        /// by verifying that the token is valid and hasn't expired.  Provide the `session_duration_minutes`
        /// parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is not
        /// specified, a Stytch session will be created with a 60 minute duration.
        /// 
        /// If the Member is required to complete MFA to log in to the Organization, the returned value of
        /// `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
        /// The `intermediate_session_token` can be passed into the
        /// [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the
        /// MFA step and acquire a full member session.
        /// The `intermediate_session_token` can also be used with the
        /// [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
        /// or the
        /// [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
        /// The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
        /// 
        /// If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
        /// MFA step.
        /// 
        /// Weâ€™re actively accepting requests for new OAuth providers! Please [email us](mailto:support@stytch.com)
        /// or [post in our community](https://stytch.com/docs/b2b/resources) if you are looking for an OAuth
        /// provider that is not currently supported.
        /// </summary>
        public async Task<B2BOAuthAuthenticateResponse> Authenticate(
            B2BOAuthAuthenticateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/oauth/authenticate"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BOAuthAuthenticateResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}

