// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.B2B
{
    public class TOTPs
    {
        private readonly HttpClient _httpClient;
        public TOTPs(HttpClient client)
        {
            _httpClient = client;
        }

        /// <summary>
        /// Create a new TOTP instance for a Member. The Member can use the authenticator application of their
        /// choice to scan the QR code or enter the secret. 
        /// 
        /// Passing an intermediate session token, session token, or session JWT is not required, but if passed must
        /// match the Member ID passed.
        /// </summary>
        public async Task<B2BTOTPsCreateResponse> Create(
            B2BTOTPsCreateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/b2b/totp");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BTOTPsCreateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }
        /// <summary>
        /// Authenticate a Member provided TOTP.
        /// </summary>
        public async Task<B2BTOTPsAuthenticateResponse> Authenticate(
            B2BTOTPsAuthenticateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/b2b/totp/authenticate");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BTOTPsAuthenticateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }
        /// <summary>
        /// Migrate an existing TOTP instance for a Member. Recovery codes are not required and will be minted for
        /// the Member if not provided.
        /// </summary>
        public async Task<B2BTOTPsMigrateResponse> Migrate(
            B2BTOTPsMigrateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/b2b/totp/migrate");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BTOTPsMigrateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }

    }

}

