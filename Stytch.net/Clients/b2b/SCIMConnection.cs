// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.B2B
{
    public class SCIMConnection
    {
        private readonly HttpClient _httpClient;
        public SCIMConnection(HttpClient client)
        {
            _httpClient = client;
        }

        /// <summary>
        /// Update a SCIM Connection.
        /// </summary>
        public async Task<B2BSCIMConnectionUpdateResponse> Update(
            B2BSCIMConnectionUpdateRequest request)
        {
            var method = HttpMethod.Put;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionUpdateResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Deletes a SCIM Connection.
        /// </summary>
        public async Task<B2BSCIMConnectionDeleteResponse> Delete(
            B2BSCIMConnectionDeleteRequest request)
        {
            var method = HttpMethod.Delete;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionDeleteResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Start a SCIM token rotation.
        /// </summary>
        public async Task<B2BSCIMConnectionRotateStartResponse> RotateStart(
            B2BSCIMConnectionRotateStartRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}/rotate/start"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionRotateStartResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Completes a SCIM token rotation. This will complete the current token rotation process and update the
        /// active token to be the new token supplied in the
        /// [start SCIM token rotation](https://stytch.com/docs/b2b/api/scim-rotate-token-start) response.
        /// </summary>
        public async Task<B2BSCIMConnectionRotateCompleteResponse> RotateComplete(
            B2BSCIMConnectionRotateCompleteRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}/rotate/complete"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionRotateCompleteResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Cancel a SCIM token rotation. This will cancel the current token rotation process, keeping the original
        /// token active.
        /// </summary>
        public async Task<B2BSCIMConnectionRotateCancelResponse> RotateCancel(
            B2BSCIMConnectionRotateCancelRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}/rotate/cancel"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionRotateCancelResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Gets a paginated list of all SCIM Groups associated with a given Connection.
        /// </summary>
        public async Task<B2BSCIMConnectionGetGroupsResponse> GetGroups(
            B2BSCIMConnectionGetGroupsRequest request)
        {
            var method = HttpMethod.Get;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection/${request.ConnectionId}"
            };
            var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
            query["cursor"] = request.Cursor;
            query["limit"] = request.Limit?.ToString();
            uriBuilder.Query = query.ToString();

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionGetGroupsResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Create a new SCIM Connection.
        /// </summary>
        public async Task<B2BSCIMConnectionCreateResponse> Create(
            B2BSCIMConnectionCreateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionCreateResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Get SCIM Connection.
        /// </summary>
        public async Task<B2BSCIMConnectionGetResponse> Get(
            B2BSCIMConnectionGetRequest request)
        {
            var method = HttpMethod.Get;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress!)
            {
                Path = $"/v1/b2b/scim/${request.OrganizationId}/connection"
            };
            var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
            uriBuilder.Query = query.ToString();

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSCIMConnectionGetResponse>(responseBody)!;
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody)!;
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}

