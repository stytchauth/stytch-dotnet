// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models.Consumer;




namespace Stytch.net.Clients.B2B
{
    public class SSOOIDC
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public SSOOIDC(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Create a new OIDC Connection.
        /// </summary>
        public async Task<B2BSSOOIDCCreateConnectionResponse> CreateConnection(
            B2BSSOOIDCCreateConnectionRequest request
            , B2BSSOOIDCCreateConnectionRequestOptions options
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/b2b/sso/oidc/{request.OrganizationId}"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;
            if (!string.IsNullOrEmpty(options.Authorization.SessionToken))
            {
                httpReq.Headers.Add("X-Stytch-Member-Session", options.Authorization.SessionToken);
            }
            if (!string.IsNullOrEmpty(options.Authorization.SessionJwt))
            {
                httpReq.Headers.Add("X-Stytch-Member-SessionJWT", options.Authorization.SessionJwt);
            }

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSSOOIDCCreateConnectionResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Updates an existing OIDC connection.
        /// 
        /// When the value of `issuer` changes, Stytch will attempt to retrieve the
        /// [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)
        /// document found at `$/.well-known/openid-configuration`.
        /// If the metadata document can be retrieved successfully, Stytch will use it to infer the values of
        /// `authorization_url`, `token_url`, `jwks_url`, and `userinfo_url`.
        /// The `client_id` and `client_secret` values cannot be inferred from the metadata document, and *must* be
        /// passed in explicitly.
        /// 
        /// If the metadata document cannot be retrieved, Stytch will still update the connection using values from
        /// the request body.
        /// 
        /// If the metadata document can be retrieved, and values are passed in the request body, the explicit
        /// values passed in from the request body will take precedence over the values inferred from the metadata
        /// document. 
        /// 
        /// Note that a newly created connection will not become active until all of the following fields are
        /// provided:
        /// * `issuer`
        /// * `client_id`
        /// * `client_secret`
        /// * `authorization_url`
        /// * `token_url`
        /// * `userinfo_url`
        /// * `jwks_url`
        /// </summary>
        public async Task<B2BSSOOIDCUpdateConnectionResponse> UpdateConnection(
            B2BSSOOIDCUpdateConnectionRequest request
            , B2BSSOOIDCUpdateConnectionRequestOptions options
        )
        {
            var method = HttpMethod.Put;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/b2b/sso/oidc/{request.OrganizationId}/connections/{request.ConnectionId}"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;
            if (!string.IsNullOrEmpty(options.Authorization.SessionToken))
            {
                httpReq.Headers.Add("X-Stytch-Member-Session", options.Authorization.SessionToken);
            }
            if (!string.IsNullOrEmpty(options.Authorization.SessionJwt))
            {
                httpReq.Headers.Add("X-Stytch-Member-SessionJWT", options.Authorization.SessionJwt);
            }

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BSSOOIDCUpdateConnectionResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}

