// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.B2B
{
    public class RBAC
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public RBAC(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Get the active RBAC Policy for your current Stytch Project. An RBAC Policy is the canonical document
        /// that stores all defined Resources and Roles within your RBAC permissioning model.
        /// 
        /// When using the backend SDKs, the RBAC Policy will be cached to allow for local evaluations, eliminating
        /// the need for an extra request to Stytch. The policy will be refreshed if an authorization check is
        /// requested and the RBAC policy was last updated more than 5 minutes ago.
        /// 
        /// Resources and Roles can be created and managed within the
        /// [RBAC page](https://stytch.com/docs/dashboard/rbac) in the Dashboard.
        /// Additionally, [Role assignment](https://stytch.com/docs/b2b/guides/rbac/role-assignment) can be
        /// programmatically managed through certain Stytch API endpoints.
        /// 
        /// Check out the [RBAC overview](https://stytch.com/docs/b2b/guides/rbac/overview) to learn more about
        /// Stytch's RBAC permissioning model.
        /// </summary>
        public async Task<B2BRBACPolicyResponse> Policy(
            B2BRBACPolicyRequest request
        )
        {
            var method = HttpMethod.Get;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/b2b/rbac/policy"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<B2BRBACPolicyResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
