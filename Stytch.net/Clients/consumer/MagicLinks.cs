// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Models.Consumer;
using System.Text;




namespace Stytch.net.Clients.Consumer
{
    public class MagicLinks
    {
        private readonly HttpClient _httpClient;
        public readonly MagicLinksEmail Email;
        public MagicLinks(HttpClient client)
        {
            _httpClient = client;
            Email = new MagicLinksEmail(_httpClient);
        }

        /// <summary>
        /// Authenticate a User given a Magic Link. This endpoint verifies that the Magic Link token is valid,
        /// hasn't expired or been previously used, and any optional security settings such as IP match or user
        /// agent match are satisfied.
        /// </summary>
        public async Task<MagicLinksAuthenticateResponse> Authenticate(
            MagicLinksAuthenticateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/magic_links/authenticate");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<MagicLinksAuthenticateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }
        /// <summary>
        /// Create an embeddable Magic Link token for a User. Access to this endpoint is restricted. To enable it,
        /// please send us a note at support@stytch.com.
        /// 
        /// ### Next steps
        /// Send the returned `token` value to the end user in a link which directs to your application. When the
        /// end user follows your link, collect the token, and call
        /// [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete
        /// authentication.
        /// </summary>
        public async Task<MagicLinksCreateResponse> Create(
            MagicLinksCreateRequest request)
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder($"/v1/magic_links");

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonBody = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<MagicLinksCreateResponse>(responseBody)!;
            }
            else
            {
                // Optionally, throw an exception or return null or an error object
                throw new HttpRequestException(
                    $"Request failed with status code {response.StatusCode}: {responseBody}");
            }
        }

    }

}

