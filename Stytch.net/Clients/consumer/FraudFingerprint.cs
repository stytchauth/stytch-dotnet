// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.Consumer
{
    public class FraudFingerprint
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public FraudFingerprint(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Lookup the associated fingerprint for the `telemetry_id` returned from the `GetTelemetryID()` function.
        /// Learn more about the different fingerprint types and verdicts in our
        /// [DFP guide](https://stytch.com/docs/fraud/guides/device-fingerprinting/overview).
        /// 
        /// You can make a decision based on the recommended `verdict` in the response:
        /// * `ALLOW` - This is a known valid device grouping or device profile that is part of the default `ALLOW`
        /// listed set of known devices by Stytch. This grouping is made up of  verified device profiles that match
        /// the characteristics of known/authentic traffic origins.
        /// * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
        /// from completing the privileged action in question.
        /// * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through increased
        /// friction such as 2FA or other forms of extended user verification before allowing the privileged action
        /// to proceed.
        /// 
        /// If the `telemetry_id` is expired or not found, this endpoint returns a 404 `telemetry_id_not_found`
        /// [error](https://stytch.com/docs/fraud/api/errors/404#telemetry_id_not_found).
        /// We recommend treating 404 errors as a `BLOCK`, since it could be a sign of an attacker trying to bypass
        /// DFP protections.
        /// See
        /// [Attacker-controlled telemetry IDs](https://stytch.com/docs/fraud/guides/device-fingerprinting/integration-steps/test-your-integration#attacker-controlled-telemetry-ids) for more information.
        /// </summary>
        public async Task<FraudFingerprintLookupResponse> Lookup(
            FraudFingerprintLookupRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/fingerprint/lookup"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<FraudFingerprintLookupResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
