// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.Consumer
{
    public class IDPOAuth
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public IDPOAuth(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Initiates a request for authorization of a Connected App to access a User's account.
        /// 
        /// Call this endpoint using the query parameters from an OAuth Authorization request. 
        /// This endpoint validates various fields (`scope`, `client_id`, `redirect_uri`, `prompt`, etc...) are
        /// correct and returns
        /// relevant information for rendering an OAuth Consent Screen.
        /// 
        /// This endpoint returns:
        /// - A public representation of the Connected App requesting authorization
        /// - Whether _explicit_ user consent must be granted before proceeding with the authorization
        /// - A list of scopes the user has the ability to grant the Connected App
        /// 
        /// Use this response to prompt the user for consent (if necessary) before calling the
        /// [Submit OAuth Authorization](https://stytch.com/docs/api/connected-apps-oauth-authorize) endpoint.
        /// 
        /// Exactly one of the following must be provided to identify the user granting authorization:
        /// - `user_id`
        /// - `session_token`
        /// - `session_jwt`
        /// 
        /// If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
        /// session for tracking purposes.
        /// One of these fields must be used if the Connected App intends to complete the
        /// [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.
        /// </summary>
        public async Task<IDPOAuthAuthorizeStartResponse> AuthorizeStart(
            IDPOAuthAuthorizeStartRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/idp/oauth/authorize/start"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<IDPOAuthAuthorizeStartResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Completes a request for authorization of a Connected App to access a User's account.
        /// 
        /// Call this endpoint using the query parameters from an OAuth Authorization request, after previously
        /// validating those parameters using the
        /// [Preflight Check](https://stytch.com/docs/api/connected-apps-oauth-authorize-start) API.
        /// Note that this endpoint takes in a few additional parameters the preflight check does not- `state`,
        /// `nonce`, and `code_challenge`.
        /// 
        /// If the authorization was successful, the `redirect_uri` will contain a valid `authorization_code`
        /// embedded as a query parameter.
        /// If the authorization was unsuccessful, the `redirect_uri` will contain an OAuth2.1 `error_code`.
        /// In both cases, redirect the user to the location for the response to be consumed by the Connected App. 
        /// 
        /// Exactly one of the following must be provided to identify the user granting authorization:
        /// - `user_id`
        /// - `session_token`
        /// - `session_jwt`
        /// 
        /// If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
        /// session for tracking purposes.
        /// One of these fields must be used if the Connected App intends to complete the
        /// [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.
        /// </summary>
        public async Task<IDPOAuthAuthorizeResponse> Authorize(
            IDPOAuthAuthorizeRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/idp/oauth/authorize"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<IDPOAuthAuthorizeResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
