// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models.Consumer;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;


namespace Stytch.net.Clients.Consumer
{
    public class M2M
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public readonly M2MClients Clients;

        public M2M(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
            Clients = new M2MClients(_httpClient, _config);
        }


        // MANUAL(token)(SERVICE_METHOD)
        /// <summary>
        /// Retrieve an access token for the given M2M Client.
        /// Access tokens are JWTs signed with the project's JWKS, and are valid for one hour after issuance.
        /// M2M Access tokens contain a standard set of claims as well as any custom claims generated from templates.
        /// 
        /// M2M Access tokens can be validated locally using the Authenticate Access Token method in the Stytch Backend SDKs,
        /// or with any library that supports JWT signature validation.
        /// </summary>
        public async Task<M2MTokenResponse> Token(
            M2MTokenRequest request
        )
        {
            var formData = new Dictionary<string, string>();
            formData.Add("client_id", request.ClientId);
            formData.Add("client_secret", request.ClientSecret);
            formData.Add("grant_type", "client_credentials");

            if (request.Scopes != null && request.Scopes.Count > 0)
            {
                formData["scope"] = String.Join(" ", request.Scopes.ToArray());
            }

            var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/v1/public/{_config.ProjectId}/oauth2/token");
            httpReq.Content = new FormUrlEncodedContent(formData);

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<M2MTokenResponse>(responseBody);
            }

            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        // ENDMANUAL(token)


        // MANUAL(authenticateToken)(SERVICE_METHOD)
        /// <summary>
        /// Authenticate an access token issued by Stytch from the Token endpoint.
        /// M2M access tokens are JWTs signed with the project's JWKs, and can be validated locally using any Stytch client library.
        /// You may pass in an optional set of scopes that the JWT must contain in order to enforce permissions.
        /// </summary>
        public async Task<M2MAuthenticateTokenResponse> AuthenticateToken(
            M2MAuthenticateTokenRequest request
        )
        {
            var res = await Utility.AuthenticateJwtLocal(_httpClient, _config, new Utility.AuthenticateJwtParams
            {
                Jwt = request.AccessToken,
                ClockSkew = request.ClockSkew,
                LifetimeValidator = request.LifetimeValidator,
            });

            var scopeClaim = (string)res.CustomClaims["scope"];
            var scopes = new List<string>((scopeClaim).Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));

            // Scope is a Stytch-controlled field, not a user-defined one.
            // Let's remove it from the custom claims and return it as a well-typed property
            res.CustomClaims.Remove("scope");

            if (request.RequiredScopes != null && request.RequiredScopes.Count > 0)
            {
                foreach (var requiredScope in request.RequiredScopes)
                {
                    if (!scopes.Contains(requiredScope))
                    {
                        throw new StytchMissingScopesException()
                        {
                            RequiredScope = requiredScope,
                            ClientScopes = scopes,
                            ClientId = res.Subject
                        };
                    }

                    ;
                }
            }

            return new M2MAuthenticateTokenResponse
            {
                ClientId = res.Subject,
                Scopes = new List<string>(scopes),
                CustomClaims = res.CustomClaims,
            };
        }
        // ENDMANUAL(authenticateToken)
    }
}