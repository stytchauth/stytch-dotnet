// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Stytch.net.Exceptions;
using Stytch.net.Models;




namespace Stytch.net.Clients.Consumer
{
    public class FraudVerdictReasons
    {
        private readonly ClientConfig _config;
        private readonly HttpClient _httpClient;
        public FraudVerdictReasons(HttpClient client, ClientConfig config)
        {
            _httpClient = client;
            _config = config;
        }

        /// <summary>
        /// Use this endpoint to override the action returned for a specific verdict reason during a fingerprint
        /// lookup. For example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for
        /// the verdict reason `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an
        /// `ALLOW` verdict instead if you expect many legitimate users to be using a browser that runs in a virtual
        /// machine.
        /// </summary>
        public async Task<FraudVerdictReasonsOverrideResponse> Override(
            FraudVerdictReasonsOverrideRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/verdict_reasons/override"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<FraudVerdictReasonsOverrideResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }
        /// <summary>
        /// Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their
        /// default actions and any overrides you may have defined. This is not an exhaustive list of verdict
        /// reasons, but it contains all verdict reasons that you may set an override on.
        /// 
        /// For a full list of possible verdict reasons, see
        /// [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
        /// </summary>
        public async Task<FraudVerdictReasonsListResponse> List(
            FraudVerdictReasonsListRequest request
        )
        {
            var method = HttpMethod.Post;
            var uriBuilder = new UriBuilder(_httpClient.BaseAddress)
            {
                Path = $"/v1/verdict_reasons/list"
            };

            var httpReq = new HttpRequestMessage(method, uriBuilder.ToString());
            var jsonSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            };
            var jsonBody = JsonConvert.SerializeObject(request, jsonSettings);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            httpReq.Content = content;

            var response = await _httpClient.SendAsync(httpReq);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<FraudVerdictReasonsListResponse>(responseBody);
            }
            try
            {
                var apiException = JsonConvert.DeserializeObject<StytchApiException>(responseBody);
                throw apiException;
            }
            catch (JsonException)
            {
                throw new StytchNetworkException($"Unexpected error occurred: {responseBody}", response);
            }
        }

    }

}
